
Proyecto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000199e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  0000199e  00001a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000198  00800172  00800172  00001b44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001be0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022da  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdd  00000000  00000000  000040e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001548  00000000  00000000  00004cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00006208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  00006660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ed  00000000  00000000  00006d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000834e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_3>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	5e 04       	cpc	r5, r14
      56:	63 04       	cpc	r6, r3
      58:	68 04       	cpc	r6, r8
      5a:	6d 04       	cpc	r6, r13
      5c:	72 04       	cpc	r7, r2
      5e:	77 04       	cpc	r7, r7
      60:	7c 04       	cpc	r7, r12
      62:	81 04       	cpc	r8, r1
      64:	86 04       	cpc	r8, r6
      66:	8b 04       	cpc	r8, r11
      68:	90 04       	cpc	r9, r0
      6a:	95 04       	cpc	r9, r5
      6c:	e4 04       	cpc	r14, r4
      6e:	cb 04       	cpc	r12, r11
      70:	f3 04       	cpc	r15, r3
      72:	cb 04       	cpc	r12, r11
      74:	e6 04       	cpc	r14, r6
      76:	c0 04       	cpc	r12, r0
      78:	eb 04       	cpc	r14, r11
      7a:	cb 04       	cpc	r12, r11
      7c:	fb 04       	cpc	r15, r11
      7e:	cb 04       	cpc	r12, r11
      80:	cb 04       	cpc	r12, r11
      82:	cb 04       	cpc	r12, r11
      84:	cb 04       	cpc	r12, r11
      86:	cb 04       	cpc	r12, r11
      88:	cb 04       	cpc	r12, r11
      8a:	cb 04       	cpc	r12, r11
      8c:	cb 04       	cpc	r12, r11
      8e:	02 05       	cpc	r16, r2
      90:	00 05       	cpc	r16, r0
      92:	6e 07       	cpc	r22, r30
      94:	d8 06       	cpc	r13, r24
      96:	d8 06       	cpc	r13, r24
      98:	d8 06       	cpc	r13, r24
      9a:	d8 06       	cpc	r13, r24
      9c:	d8 06       	cpc	r13, r24
      9e:	d8 06       	cpc	r13, r24
      a0:	61 07       	cpc	r22, r17
      a2:	d8 06       	cpc	r13, r24
      a4:	d8 06       	cpc	r13, r24
      a6:	d8 06       	cpc	r13, r24
      a8:	d8 06       	cpc	r13, r24
      aa:	d8 06       	cpc	r13, r24
      ac:	65 07       	cpc	r22, r21
      ae:	d8 06       	cpc	r13, r24
      b0:	1e 07       	cpc	r17, r30
      b2:	d8 06       	cpc	r13, r24
      b4:	03 07       	cpc	r16, r19
      b6:	f8 06       	cpc	r15, r24
      b8:	0c 07       	cpc	r16, r28
      ba:	d8 06       	cpc	r13, r24
      bc:	3e 07       	cpc	r19, r30
      be:	d8 06       	cpc	r13, r24
      c0:	d8 06       	cpc	r13, r24
      c2:	d8 06       	cpc	r13, r24
      c4:	d8 06       	cpc	r13, r24
      c6:	d8 06       	cpc	r13, r24
      c8:	d8 06       	cpc	r13, r24
      ca:	d8 06       	cpc	r13, r24
      cc:	d8 06       	cpc	r13, r24
      ce:	4b 07       	cpc	r20, r27
      d0:	51 07       	cpc	r21, r17
      d2:	5d 07       	cpc	r21, r29
      d4:	57 07       	cpc	r21, r23

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d4 e0       	ldi	r29, 0x04	; 4
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	11 e0       	ldi	r17, 0x01	; 1
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ee e9       	ldi	r30, 0x9E	; 158
      ea:	f9 e1       	ldi	r31, 0x19	; 25
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a2 37       	cpi	r26, 0x72	; 114
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	a2 e7       	ldi	r26, 0x72	; 114
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	aa 30       	cpi	r26, 0x0A	; 10
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 72 07 	call	0xee4	; 0xee4 <main>
     10c:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <ClearBit>:
	}
	_delay_ms(btn_delay_ms);
	loop_until_bit_is_clear(*pin, bit);
	_delay_ms(btn_delay_ms);
	return 1;
}
     114:	fc 01       	movw	r30, r24
     116:	90 81       	ld	r25, Z
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <ClearBit+0xe>
     11e:	22 0f       	add	r18, r18
     120:	33 1f       	adc	r19, r19
     122:	6a 95       	dec	r22
     124:	e2 f7       	brpl	.-8      	; 0x11e <ClearBit+0xa>
     126:	20 95       	com	r18
     128:	29 23       	and	r18, r25
     12a:	20 83       	st	Z, r18
     12c:	08 95       	ret

0000012e <SetBit>:
     12e:	fc 01       	movw	r30, r24
     130:	40 81       	ld	r20, Z
     132:	21 e0       	ldi	r18, 0x01	; 1
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <SetBit+0xe>
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	6a 95       	dec	r22
     13e:	e2 f7       	brpl	.-8      	; 0x138 <SetBit+0xa>
     140:	24 2b       	or	r18, r20
     142:	20 83       	st	Z, r18
     144:	08 95       	ret

00000146 <DelayIfClear>:

//Returns false if the requested bit is not clear. Returns true and delays otherwise.
u8 DelayIfClear(const volatile u8* const pin, const u8 bit) {
     146:	fc 01       	movw	r30, r24
	if (bit_is_set(*pin, bit)) {
     148:	80 81       	ld	r24, Z
     14a:	46 2f       	mov	r20, r22
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DelayIfClear+0xe>
     150:	95 95       	asr	r25
     152:	87 95       	ror	r24
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <DelayIfClear+0xa>
     158:	80 fd       	sbrc	r24, 0
     15a:	18 c0       	rjmp	.+48     	; 0x18c <DelayIfClear+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15c:	81 ee       	ldi	r24, 0xE1	; 225
     15e:	94 e0       	ldi	r25, 0x04	; 4
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <DelayIfClear+0x1a>
     164:	00 c0       	rjmp	.+0      	; 0x166 <DelayIfClear+0x20>
     166:	00 00       	nop
		return 0;
	}
	_delay_ms(btn_delay_ms);
	loop_until_bit_is_set(*pin, bit);
     168:	20 81       	ld	r18, Z
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	04 2e       	mov	r0, r20
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DelayIfClear+0x2e>
     170:	35 95       	asr	r19
     172:	27 95       	ror	r18
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <DelayIfClear+0x2a>
     178:	20 ff       	sbrs	r18, 0
     17a:	f6 cf       	rjmp	.-20     	; 0x168 <DelayIfClear+0x22>
     17c:	81 ee       	ldi	r24, 0xE1	; 225
     17e:	94 e0       	ldi	r25, 0x04	; 4
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <DelayIfClear+0x3a>
     184:	00 c0       	rjmp	.+0      	; 0x186 <DelayIfClear+0x40>
     186:	00 00       	nop
	_delay_ms(btn_delay_ms);
	return 1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	08 95       	ret
}

//Returns false if the requested bit is not clear. Returns true and delays otherwise.
u8 DelayIfClear(const volatile u8* const pin, const u8 bit) {
	if (bit_is_set(*pin, bit)) {
		return 0;
     18c:	80 e0       	ldi	r24, 0x00	; 0
	}
	_delay_ms(btn_delay_ms);
	loop_until_bit_is_set(*pin, bit);
	_delay_ms(btn_delay_ms);
	return 1;
}
     18e:	08 95       	ret

00000190 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     190:	8b b3       	in	r24, 0x1b	; 27
     192:	80 64       	ori	r24, 0x40	; 64
     194:	8b bb       	out	0x1b, r24	; 27
     196:	00 c0       	rjmp	.+0      	; 0x198 <toggle_e+0x8>
     198:	8b b3       	in	r24, 0x1b	; 27
     19a:	8f 7b       	andi	r24, 0xBF	; 191
     19c:	8b bb       	out	0x1b, r24	; 27
     19e:	08 95       	ret

000001a0 <lcd_write>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	d8 2f       	mov	r29, r24
     1a6:	66 23       	and	r22, r22
     1a8:	21 f0       	breq	.+8      	; 0x1b2 <lcd_write+0x12>
     1aa:	8b b3       	in	r24, 0x1b	; 27
     1ac:	80 61       	ori	r24, 0x10	; 16
     1ae:	8b bb       	out	0x1b, r24	; 27
     1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0x18>
     1b2:	8b b3       	in	r24, 0x1b	; 27
     1b4:	8f 7e       	andi	r24, 0xEF	; 239
     1b6:	8b bb       	out	0x1b, r24	; 27
     1b8:	8b b3       	in	r24, 0x1b	; 27
     1ba:	8f 7d       	andi	r24, 0xDF	; 223
     1bc:	8b bb       	out	0x1b, r24	; 27
     1be:	8a b3       	in	r24, 0x1a	; 26
     1c0:	8f 60       	ori	r24, 0x0F	; 15
     1c2:	8a bb       	out	0x1a, r24	; 26
     1c4:	cb b3       	in	r28, 0x1b	; 27
     1c6:	c0 7f       	andi	r28, 0xF0	; 240
     1c8:	8d 2f       	mov	r24, r29
     1ca:	82 95       	swap	r24
     1cc:	8f 70       	andi	r24, 0x0F	; 15
     1ce:	8c 2b       	or	r24, r28
     1d0:	8b bb       	out	0x1b, r24	; 27
     1d2:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     1d6:	df 70       	andi	r29, 0x0F	; 15
     1d8:	dc 2b       	or	r29, r28
     1da:	db bb       	out	0x1b, r29	; 27
     1dc:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     1e0:	cf 60       	ori	r28, 0x0F	; 15
     1e2:	cb bb       	out	0x1b, r28	; 27
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <lcd_read>:
     1ea:	88 23       	and	r24, r24
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <lcd_read+0xc>
     1ee:	8b b3       	in	r24, 0x1b	; 27
     1f0:	80 61       	ori	r24, 0x10	; 16
     1f2:	8b bb       	out	0x1b, r24	; 27
     1f4:	03 c0       	rjmp	.+6      	; 0x1fc <lcd_read+0x12>
     1f6:	8b b3       	in	r24, 0x1b	; 27
     1f8:	8f 7e       	andi	r24, 0xEF	; 239
     1fa:	8b bb       	out	0x1b, r24	; 27
     1fc:	8b b3       	in	r24, 0x1b	; 27
     1fe:	80 62       	ori	r24, 0x20	; 32
     200:	8b bb       	out	0x1b, r24	; 27
     202:	8a b3       	in	r24, 0x1a	; 26
     204:	80 7f       	andi	r24, 0xF0	; 240
     206:	8a bb       	out	0x1a, r24	; 26
     208:	8b b3       	in	r24, 0x1b	; 27
     20a:	80 64       	ori	r24, 0x40	; 64
     20c:	8b bb       	out	0x1b, r24	; 27
     20e:	00 c0       	rjmp	.+0      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
     210:	99 b3       	in	r25, 0x19	; 25
     212:	92 95       	swap	r25
     214:	90 7f       	andi	r25, 0xF0	; 240
     216:	8b b3       	in	r24, 0x1b	; 27
     218:	8f 7b       	andi	r24, 0xBF	; 191
     21a:	8b bb       	out	0x1b, r24	; 27
     21c:	00 c0       	rjmp	.+0      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
     21e:	8b b3       	in	r24, 0x1b	; 27
     220:	80 64       	ori	r24, 0x40	; 64
     222:	8b bb       	out	0x1b, r24	; 27
     224:	00 c0       	rjmp	.+0      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
     226:	89 b3       	in	r24, 0x19	; 25
     228:	8f 70       	andi	r24, 0x0F	; 15
     22a:	2b b3       	in	r18, 0x1b	; 27
     22c:	2f 7b       	andi	r18, 0xBF	; 191
     22e:	2b bb       	out	0x1b, r18	; 27
     230:	89 2b       	or	r24, r25
     232:	08 95       	ret

00000234 <lcd_waitbusy>:
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_read>
     23a:	88 23       	and	r24, r24
     23c:	dc f3       	brlt	.-10     	; 0x234 <lcd_waitbusy>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_waitbusy+0xc>
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_read>
     246:	08 95       	ret

00000248 <lcd_command>:
     248:	cf 93       	push	r28
     24a:	c8 2f       	mov	r28, r24
     24c:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_waitbusy>
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	8c 2f       	mov	r24, r28
     254:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_write>
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_gotoxy>:
     25c:	61 11       	cpse	r22, r1
     25e:	04 c0       	rjmp	.+8      	; 0x268 <lcd_gotoxy+0xc>
     260:	80 58       	subi	r24, 0x80	; 128
     262:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
     266:	08 95       	ret
     268:	80 54       	subi	r24, 0x40	; 64
     26a:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
     26e:	08 95       	ret

00000270 <lcd_clrscr>:
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
     276:	08 95       	ret

00000278 <lcd_putc>:
     278:	cf 93       	push	r28
     27a:	c8 2f       	mov	r28, r24
     27c:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_waitbusy>
     280:	ca 30       	cpi	r28, 0x0A	; 10
     282:	49 f4       	brne	.+18     	; 0x296 <lcd_putc+0x1e>
     284:	80 34       	cpi	r24, 0x40	; 64
     286:	10 f4       	brcc	.+4      	; 0x28c <lcd_putc+0x14>
     288:	80 e4       	ldi	r24, 0x40	; 64
     28a:	01 c0       	rjmp	.+2      	; 0x28e <lcd_putc+0x16>
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	80 58       	subi	r24, 0x80	; 128
     290:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
     294:	04 c0       	rjmp	.+8      	; 0x29e <lcd_putc+0x26>
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	8c 2f       	mov	r24, r28
     29a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_write>
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <lcd_puts>:
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	fc 01       	movw	r30, r24
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <lcd_puts+0xe>
     2aa:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
     2ae:	fe 01       	movw	r30, r28
     2b0:	ef 01       	movw	r28, r30
     2b2:	21 96       	adiw	r28, 0x01	; 1
     2b4:	80 81       	ld	r24, Z
     2b6:	81 11       	cpse	r24, r1
     2b8:	f8 cf       	rjmp	.-16     	; 0x2aa <lcd_puts+0x8>
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     2c8:	8a b3       	in	r24, 0x1a	; 26
     2ca:	8f 67       	ori	r24, 0x7F	; 127
     2cc:	8a bb       	out	0x1a, r24	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2ce:	80 ea       	ldi	r24, 0xA0	; 160
     2d0:	9f e0       	ldi	r25, 0x0F	; 15
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     2d6:	8b b3       	in	r24, 0x1b	; 27
     2d8:	82 60       	ori	r24, 0x02	; 2
     2da:	8b bb       	out	0x1b, r24	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     2dc:	8b b3       	in	r24, 0x1b	; 27
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	8b bb       	out	0x1b, r24	; 27
    lcd_e_toggle();
     2e2:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2e6:	80 ee       	ldi	r24, 0xE0	; 224
     2e8:	94 e0       	ldi	r25, 0x04	; 4
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     2ee:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2f2:	c0 e1       	ldi	r28, 0x10	; 16
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
     2f6:	ce 01       	movw	r24, r28
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     2fc:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     300:	ce 01       	movw	r24, r28
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     306:	8b b3       	in	r24, 0x1b	; 27
     308:	8e 7f       	andi	r24, 0xFE	; 254
     30a:	8b bb       	out	0x1b, r24	; 27
    lcd_e_toggle();
     30c:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     310:	21 97       	sbiw	r28, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     314:	88 e2       	ldi	r24, 0x28	; 40
     316:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     320:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     32a:	81 2f       	mov	r24, r17
     32c:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>

}/* lcd_init */
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	08 95       	ret

00000338 <SetUpRegisters>:

void SetUpRegisters() {
	//PORTA: LCD
	//PORTB: TIMER0
	//PORTC: KEYPAD
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
     338:	8f e0       	ldi	r24, 0x0F	; 15
     33a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_init>
	
	DDRB = 0x08;
     33e:	88 e0       	ldi	r24, 0x08	; 8
     340:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
     342:	18 ba       	out	0x18, r1	; 24
	
	DDRC = 0xF0;
     344:	80 ef       	ldi	r24, 0xF0	; 240
     346:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 0;
     34c:	12 be       	out	0x32, r1	; 50
	TCCR0 |= _BV(WGM01);
     34e:	83 b7       	in	r24, 0x33	; 51
     350:	88 60       	ori	r24, 0x08	; 8
     352:	83 bf       	out	0x33, r24	; 51
	
	TIFR |= _BV(OCF2);
     354:	88 b7       	in	r24, 0x38	; 56
     356:	80 68       	ori	r24, 0x80	; 128
     358:	88 bf       	out	0x38, r24	; 56
	TIMSK |= _BV(OCIE2);
     35a:	89 b7       	in	r24, 0x39	; 57
     35c:	80 68       	ori	r24, 0x80	; 128
     35e:	89 bf       	out	0x39, r24	; 57
	TCNT2 = 0;
     360:	14 bc       	out	0x24, r1	; 36
	OCR2 = 124;
     362:	8c e7       	ldi	r24, 0x7C	; 124
     364:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= _BV(WGM21) | _BV(CS21);
     366:	85 b5       	in	r24, 0x25	; 37
     368:	8a 60       	ori	r24, 0x0A	; 10
     36a:	85 bd       	out	0x25, r24	; 37
	
	sei();
     36c:	78 94       	sei
     36e:	08 95       	ret

00000370 <ReadFromKeypad>:
	return;
}

char ReadFromKeypad() {
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
	for (u8 i = 4; i < 8; i++) {
     374:	d4 e0       	ldi	r29, 0x04	; 4
     376:	3b c0       	rjmp	.+118    	; 0x3ee <ReadFromKeypad+0x7e>
		ClearBit(&PORTC, i);
     378:	6d 2f       	mov	r22, r29
     37a:	85 e3       	ldi	r24, 0x35	; 53
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 8a 00 	call	0x114	; 0x114 <ClearBit>
     382:	81 ee       	ldi	r24, 0xE1	; 225
     384:	94 e0       	ldi	r25, 0x04	; 4
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <ReadFromKeypad+0x16>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <ReadFromKeypad+0x1c>
     38c:	00 00       	nop
		_delay_ms(btn_delay_ms);
		for (u8 e = 0; e < 4; e++) {
     38e:	c0 e0       	ldi	r28, 0x00	; 0
     390:	20 c0       	rjmp	.+64     	; 0x3d2 <ReadFromKeypad+0x62>
			if(DelayIfClear(&PINC, e)) {
     392:	6c 2f       	mov	r22, r28
     394:	83 e3       	ldi	r24, 0x33	; 51
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 a3 00 	call	0x146	; 0x146 <DelayIfClear>
     39c:	88 23       	and	r24, r24
     39e:	c1 f0       	breq	.+48     	; 0x3d0 <ReadFromKeypad+0x60>
				SetBit(&PORTC, i);
     3a0:	6d 2f       	mov	r22, r29
     3a2:	85 e3       	ldi	r24, 0x35	; 53
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 97 00 	call	0x12e	; 0x12e <SetBit>
				return keypadLayout[7 - i][3 - e];
     3aa:	87 e0       	ldi	r24, 0x07	; 7
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	8d 1b       	sub	r24, r29
     3b0:	91 09       	sbc	r25, r1
     3b2:	23 e0       	ldi	r18, 0x03	; 3
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	2c 1b       	sub	r18, r28
     3b8:	31 09       	sbc	r19, r1
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	8f 59       	subi	r24, 0x9F	; 159
     3c4:	9e 4f       	sbci	r25, 0xFE	; 254
     3c6:	fc 01       	movw	r30, r24
     3c8:	e2 0f       	add	r30, r18
     3ca:	f3 1f       	adc	r31, r19
     3cc:	80 81       	ld	r24, Z
     3ce:	12 c0       	rjmp	.+36     	; 0x3f4 <ReadFromKeypad+0x84>

char ReadFromKeypad() {
	for (u8 i = 4; i < 8; i++) {
		ClearBit(&PORTC, i);
		_delay_ms(btn_delay_ms);
		for (u8 e = 0; e < 4; e++) {
     3d0:	cf 5f       	subi	r28, 0xFF	; 255
     3d2:	c4 30       	cpi	r28, 0x04	; 4
     3d4:	f0 f2       	brcs	.-68     	; 0x392 <ReadFromKeypad+0x22>
			if(DelayIfClear(&PINC, e)) {
				SetBit(&PORTC, i);
				return keypadLayout[7 - i][3 - e];
			}
		}
		SetBit(&PORTC, i);
     3d6:	6d 2f       	mov	r22, r29
     3d8:	85 e3       	ldi	r24, 0x35	; 53
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 97 00 	call	0x12e	; 0x12e <SetBit>
     3e0:	81 ee       	ldi	r24, 0xE1	; 225
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <ReadFromKeypad+0x74>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <ReadFromKeypad+0x7a>
     3ea:	00 00       	nop
	sei();
	return;
}

char ReadFromKeypad() {
	for (u8 i = 4; i < 8; i++) {
     3ec:	df 5f       	subi	r29, 0xFF	; 255
     3ee:	d8 30       	cpi	r29, 0x08	; 8
     3f0:	18 f2       	brcs	.-122    	; 0x378 <ReadFromKeypad+0x8>
			}
		}
		SetBit(&PORTC, i);
		_delay_ms(btn_delay_ms);
	}
	return '\0';
     3f2:	80 e0       	ldi	r24, 0x00	; 0
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <GetNoteLength>:
	is_playing = 0;
	TCCR0 &= ~_BV(COM00);
	return;
}

double GetNoteLength(const u8 length_bitmask) {
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	d8 2f       	mov	r29, r24
	double total_length = 0.0;
	for (u8 i = 0; i < 6; i++) {
     400:	c0 e0       	ldi	r28, 0x00	; 0
	TCCR0 &= ~_BV(COM00);
	return;
}

double GetNoteLength(const u8 length_bitmask) {
	double total_length = 0.0;
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	cb 01       	movw	r24, r22
	for (u8 i = 0; i < 6; i++) {
     408:	1a c0       	rjmp	.+52     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
		if ((length_bitmask & (0x01 << i)) != 0) {
     40a:	2c 2f       	mov	r18, r28
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4d 2f       	mov	r20, r29
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	0c 2e       	mov	r0, r28
     414:	02 c0       	rjmp	.+4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     416:	55 95       	asr	r21
     418:	47 95       	ror	r20
     41a:	0a 94       	dec	r0
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     41e:	40 ff       	sbrs	r20, 0
     420:	0d c0       	rjmp	.+26     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
			total_length += noteLengths[i];
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	f9 01       	movw	r30, r18
     42c:	e7 5b       	subi	r30, 0xB7	; 183
     42e:	fe 4f       	sbci	r31, 0xFE	; 254
     430:	20 81       	ld	r18, Z
     432:	31 81       	ldd	r19, Z+1	; 0x01
     434:	42 81       	ldd	r20, Z+2	; 0x02
     436:	53 81       	ldd	r21, Z+3	; 0x03
     438:	0e 94 77 07 	call	0xeee	; 0xeee <__addsf3>
	return;
}

double GetNoteLength(const u8 length_bitmask) {
	double total_length = 0.0;
	for (u8 i = 0; i < 6; i++) {
     43c:	cf 5f       	subi	r28, 0xFF	; 255
     43e:	c6 30       	cpi	r28, 0x06	; 6
     440:	20 f3       	brcs	.-56     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		if ((length_bitmask & (0x01 << i)) != 0) {
			total_length += noteLengths[i];
		}
	}
	return total_length;
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <IsNoteEOF>:
	}
	lcd_gotoxy(4, 0);
}

u8 IsNoteEOF(u8 note_idx) {
	return melody[melody_index][1] == 0;
     448:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	ee 0f       	add	r30, r30
     450:	ff 1f       	adc	r31, r31
     452:	ee 58       	subi	r30, 0x8E	; 142
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	91 81       	ldd	r25, Z+1	; 0x01
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	91 11       	cpse	r25, r1
     45c:	80 e0       	ldi	r24, 0x00	; 0
}
     45e:	08 95       	ret

00000460 <DeleteNote>:
	melody[melody_idx][0] = note;
	melody[melody_idx][1] = length;
}

void DeleteNote(u8 melody_idx) {
	while (melody[melody_idx][1] != 0x00) {
     460:	11 c0       	rjmp	.+34     	; 0x484 <DeleteNote+0x24>
		melody[melody_idx][0] = melody[melody_idx + 1][0];
     462:	d9 01       	movw	r26, r18
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	aa 0f       	add	r26, r26
     468:	bb 1f       	adc	r27, r27
     46a:	ae 58       	subi	r26, 0x8E	; 142
     46c:	be 4f       	sbci	r27, 0xFE	; 254
     46e:	9c 91       	ld	r25, X
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	f9 01       	movw	r30, r18
     476:	ee 58       	subi	r30, 0x8E	; 142
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	90 83       	st	Z, r25
		melody[melody_idx][1] = melody[melody_idx + 1][1];
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	9c 91       	ld	r25, X
     480:	91 83       	std	Z+1, r25	; 0x01
		melody_idx++;
     482:	8f 5f       	subi	r24, 0xFF	; 255
	melody[melody_idx][0] = note;
	melody[melody_idx][1] = length;
}

void DeleteNote(u8 melody_idx) {
	while (melody[melody_idx][1] != 0x00) {
     484:	28 2f       	mov	r18, r24
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	ee 58       	subi	r30, 0x8E	; 142
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	91 81       	ldd	r25, Z+1	; 0x01
     494:	91 11       	cpse	r25, r1
     496:	e5 cf       	rjmp	.-54     	; 0x462 <DeleteNote+0x2>
		melody[melody_idx][0] = melody[melody_idx + 1][0];
		melody[melody_idx][1] = melody[melody_idx + 1][1];
		melody_idx++;
	}
	melody[melody_idx][0] = 0x00;
     498:	22 0f       	add	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	f9 01       	movw	r30, r18
     49e:	ee 58       	subi	r30, 0x8E	; 142
     4a0:	fe 4f       	sbci	r31, 0xFE	; 254
     4a2:	10 82       	st	Z, r1
	melody[melody_idx][1] = 0x00;
     4a4:	11 82       	std	Z+1, r1	; 0x01
     4a6:	08 95       	ret

000004a8 <SetBPM>:
}

void SetBPM() {
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <SetBPM+0xe>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <SetBPM+0x10>
     4b8:	1f 92       	push	r1
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	lcd_clrscr();
     4be:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_command(LCD_DISP_ON);
     4c2:	8c e0       	ldi	r24, 0x0C	; 12
     4c4:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
	lcd_gotoxy(0, 0);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	lcd_puts("BPM: 0");
     4d0:	85 e6       	ldi	r24, 0x65	; 101
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	u16 bpm = 0;
	char bpm_str[5] = {};
     4d8:	fe 01       	movw	r30, r28
     4da:	31 96       	adiw	r30, 0x01	; 1
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	df 01       	movw	r26, r30
     4e0:	1d 92       	st	X+, r1
     4e2:	8a 95       	dec	r24
     4e4:	e9 f7       	brne	.-6      	; 0x4e0 <SetBPM+0x38>
void SetBPM() {
	lcd_clrscr();
	lcd_command(LCD_DISP_ON);
	lcd_gotoxy(0, 0);
	lcd_puts("BPM: 0");
	u16 bpm = 0;
     4e6:	00 e0       	ldi	r16, 0x00	; 0
     4e8:	10 e0       	ldi	r17, 0x00	; 0
	char bpm_str[5] = {};
	u8 resp;
	while (1) {
		resp = ReadFromKeypad();
     4ea:	0e 94 b8 01 	call	0x370	; 0x370 <ReadFromKeypad>
		if (resp == 'A') {
     4ee:	81 34       	cpi	r24, 0x41	; 65
     4f0:	f1 f4       	brne	.+60     	; 0x52e <SetBPM+0x86>
			if (bpm == 0) {
     4f2:	01 15       	cp	r16, r1
     4f4:	11 05       	cpc	r17, r1
     4f6:	11 f4       	brne	.+4      	; 0x4fc <SetBPM+0x54>
				bpm = 60;
     4f8:	0c e3       	ldi	r16, 0x3C	; 60
     4fa:	10 e0       	ldi	r17, 0x00	; 0
			}
			beats_per_minute = bpm;
     4fc:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <beats_per_minute>
			timer_length = 60.0 / (double)beats_per_minute;
     500:	60 2f       	mov	r22, r16
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__floatunsisf>
     50c:	9b 01       	movw	r18, r22
     50e:	ac 01       	movw	r20, r24
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e7       	ldi	r24, 0x70	; 112
     516:	92 e4       	ldi	r25, 0x42	; 66
     518:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
     51c:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     520:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     524:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     528:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			return;
     52c:	55 c0       	rjmp	.+170    	; 0x5d8 <SetBPM+0x130>
		} else if (resp == 'B') {
     52e:	82 34       	cpi	r24, 0x42	; 66
     530:	09 f4       	brne	.+2      	; 0x534 <SetBPM+0x8c>
     532:	52 c0       	rjmp	.+164    	; 0x5d8 <SetBPM+0x130>
			return;
		} else if (resp == 'D') {
     534:	84 34       	cpi	r24, 0x44	; 68
     536:	69 f4       	brne	.+26     	; 0x552 <SetBPM+0xaa>
			bpm /= 10;
     538:	98 01       	movw	r18, r16
     53a:	ad ec       	ldi	r26, 0xCD	; 205
     53c:	bc ec       	ldi	r27, 0xCC	; 204
     53e:	0e 94 98 09 	call	0x1330	; 0x1330 <__umulhisi3>
     542:	8c 01       	movw	r16, r24
     544:	16 95       	lsr	r17
     546:	07 95       	ror	r16
     548:	16 95       	lsr	r17
     54a:	07 95       	ror	r16
     54c:	16 95       	lsr	r17
     54e:	07 95       	ror	r16
     550:	20 c0       	rjmp	.+64     	; 0x592 <SetBPM+0xea>
		} else if (resp < '0' || resp > '9') {
     552:	90 ed       	ldi	r25, 0xD0	; 208
     554:	98 0f       	add	r25, r24
     556:	9a 30       	cpi	r25, 0x0A	; 10
     558:	40 f6       	brcc	.-112    	; 0x4ea <SetBPM+0x42>
			continue;
		} else {
			bpm *= 10;
     55a:	98 01       	movw	r18, r16
     55c:	22 0f       	add	r18, r18
     55e:	33 1f       	adc	r19, r19
     560:	b8 01       	movw	r22, r16
     562:	66 0f       	add	r22, r22
     564:	77 1f       	adc	r23, r23
     566:	66 0f       	add	r22, r22
     568:	77 1f       	adc	r23, r23
     56a:	66 0f       	add	r22, r22
     56c:	77 1f       	adc	r23, r23
     56e:	62 0f       	add	r22, r18
     570:	73 1f       	adc	r23, r19
			bpm += resp - '0';
     572:	68 0f       	add	r22, r24
     574:	71 1d       	adc	r23, r1
     576:	8b 01       	movw	r16, r22
     578:	00 53       	subi	r16, 0x30	; 48
     57a:	11 09       	sbc	r17, r1
			if (bpm > 255) {
     57c:	0f 3f       	cpi	r16, 0xFF	; 255
     57e:	11 05       	cpc	r17, r1
     580:	41 f0       	breq	.+16     	; 0x592 <SetBPM+0xea>
     582:	38 f0       	brcs	.+14     	; 0x592 <SetBPM+0xea>
				bpm = 255;
				lcd_puts("255");
     584:	8c e6       	ldi	r24, 0x6C	; 108
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
			continue;
		} else {
			bpm *= 10;
			bpm += resp - '0';
			if (bpm > 255) {
				bpm = 255;
     58c:	0f ef       	ldi	r16, 0xFF	; 255
     58e:	10 e0       	ldi	r17, 0x00	; 0
				lcd_puts("255");
				continue;
     590:	ac cf       	rjmp	.-168    	; 0x4ea <SetBPM+0x42>
			}
		}
		lcd_gotoxy(5, 0);
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	85 e0       	ldi	r24, 0x05	; 5
     596:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
		lcd_puts("   ");
     59a:	80 e7       	ldi	r24, 0x70	; 112
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		lcd_gotoxy(5, 0);
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
		sprintf(bpm_str, "%d", bpm);
     5aa:	1f 93       	push	r17
     5ac:	0f 93       	push	r16
     5ae:	84 e7       	ldi	r24, 0x74	; 116
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	7c 01       	movw	r14, r24
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	0e 94 bb 09 	call	0x1376	; 0x1376 <sprintf>
		lcd_puts(bpm_str);
     5c4:	c7 01       	movw	r24, r14
     5c6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	89 cf       	rjmp	.-238    	; 0x4ea <SetBPM+0x42>
	}
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <SelectLength>:
		
		//_delay_ms(1);
	}
}

u8 SelectLength() {
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
	lcd_clrscr();
     5f4:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_command(LCD_DISP_ON);
     5f8:	8c e0       	ldi	r24, 0x0C	; 12
     5fa:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
	lcd_gotoxy(0, 1);
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	lcd_puts("w h q o s t");
     606:	87 e7       	ldi	r24, 0x77	; 119
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	
	u8 length = 0;
     60e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1) {
		for (u8 i = 0; i < 6; i++) {
     610:	c0 e0       	ldi	r28, 0x00	; 0
     612:	17 c0       	rjmp	.+46     	; 0x642 <SelectLength+0x52>
			lcd_gotoxy(i * 2, 0);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	8c 2f       	mov	r24, r28
     618:	88 0f       	add	r24, r24
     61a:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
			if ((length & (1 << i)) == 0) {
     61e:	2d 2f       	mov	r18, r29
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	0c 2e       	mov	r0, r28
     624:	02 c0       	rjmp	.+4      	; 0x62a <SelectLength+0x3a>
     626:	35 95       	asr	r19
     628:	27 95       	ror	r18
     62a:	0a 94       	dec	r0
     62c:	e2 f7       	brpl	.-8      	; 0x626 <SelectLength+0x36>
     62e:	20 fd       	sbrc	r18, 0
     630:	04 c0       	rjmp	.+8      	; 0x63a <SelectLength+0x4a>
				lcd_putc('0');
     632:	80 e3       	ldi	r24, 0x30	; 48
     634:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
     638:	03 c0       	rjmp	.+6      	; 0x640 <SelectLength+0x50>
			} else {
				lcd_putc('1');
     63a:	81 e3       	ldi	r24, 0x31	; 49
     63c:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
	lcd_puts("w h q o s t");
	
	u8 length = 0;
	
	while (1) {
		for (u8 i = 0; i < 6; i++) {
     640:	cf 5f       	subi	r28, 0xFF	; 255
     642:	c6 30       	cpi	r28, 0x06	; 6
     644:	38 f3       	brcs	.-50     	; 0x614 <SelectLength+0x24>
				lcd_putc('0');
			} else {
				lcd_putc('1');
			}
		}
		char resp = ReadFromKeypad();
     646:	0e 94 b8 01 	call	0x370	; 0x370 <ReadFromKeypad>
		
		if (resp >= '0' && resp <= '5') {
     64a:	90 ed       	ldi	r25, 0xD0	; 208
     64c:	98 0f       	add	r25, r24
     64e:	96 30       	cpi	r25, 0x06	; 6
     650:	60 f4       	brcc	.+24     	; 0x66a <SelectLength+0x7a>
			length ^= 1 << (resp - '0');
     652:	48 2f       	mov	r20, r24
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	40 53       	subi	r20, 0x30	; 48
     658:	51 09       	sbc	r21, r1
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	02 c0       	rjmp	.+4      	; 0x664 <SelectLength+0x74>
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	4a 95       	dec	r20
     666:	e2 f7       	brpl	.-8      	; 0x660 <SelectLength+0x70>
     668:	d2 27       	eor	r29, r18
		}
		switch(resp) {
     66a:	81 34       	cpi	r24, 0x41	; 65
     66c:	19 f0       	breq	.+6      	; 0x674 <SelectLength+0x84>
     66e:	82 34       	cpi	r24, 0x42	; 66
     670:	29 f0       	breq	.+10     	; 0x67c <SelectLength+0x8c>
     672:	ce cf       	rjmp	.-100    	; 0x610 <SelectLength+0x20>
		case 'A':
			if (length == 0x00) {
     674:	d1 11       	cpse	r29, r1
     676:	04 c0       	rjmp	.+8      	; 0x680 <SelectLength+0x90>
				return 0x04;
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	03 c0       	rjmp	.+6      	; 0x682 <SelectLength+0x92>
			}
			return length;
			break;
		case 'B':
			return 255;
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	01 c0       	rjmp	.+2      	; 0x682 <SelectLength+0x92>
		switch(resp) {
		case 'A':
			if (length == 0x00) {
				return 0x04;
			}
			return length;
     680:	8d 2f       	mov	r24, r29
			break;
		default:
			break;
		}
	}
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <PlayNote>:
	timer_counter = 1000.0;
	is_playing = playSingleNote;
}

void PlayNote(u8 note_idx) {
	if (note_idx == 0) {
     688:	81 11       	cpse	r24, r1
     68a:	04 c0       	rjmp	.+8      	; 0x694 <PlayNote+0xc>
		TCCR0 &= ~_BV(COM00);
     68c:	83 b7       	in	r24, 0x33	; 51
     68e:	8f 7e       	andi	r24, 0xEF	; 239
     690:	83 bf       	out	0x33, r24	; 51
     692:	08 95       	ret
	} else {
		TCCR0 |= _BV(COM00);
     694:	93 b7       	in	r25, 0x33	; 51
     696:	90 61       	ori	r25, 0x10	; 16
     698:	93 bf       	out	0x33, r25	; 51
		TCCR0 &= ~0x07;
     69a:	93 b7       	in	r25, 0x33	; 51
     69c:	98 7f       	andi	r25, 0xF8	; 248
     69e:	93 bf       	out	0x33, r25	; 51
		if (noteDefinitions[note_idx][1] == 8) {
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	e1 53       	subi	r30, 0x31	; 49
     6aa:	ff 4f       	sbci	r31, 0xFF	; 255
     6ac:	21 81       	ldd	r18, Z+1	; 0x01
     6ae:	28 30       	cpi	r18, 0x08	; 8
     6b0:	21 f4       	brne	.+8      	; 0x6ba <PlayNote+0x32>
			TCCR0 |= _BV(CS01);
     6b2:	23 b7       	in	r18, 0x33	; 51
     6b4:	22 60       	ori	r18, 0x02	; 2
     6b6:	23 bf       	out	0x33, r18	; 51
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <PlayNote+0x38>
		} else {
			TCCR0 |= _BV(CS01) | _BV(CS00);
     6ba:	23 b7       	in	r18, 0x33	; 51
     6bc:	23 60       	ori	r18, 0x03	; 3
     6be:	23 bf       	out	0x33, r18	; 51
		}
		OCR0 = noteDefinitions[note_idx][0];
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	fc 01       	movw	r30, r24
     6c6:	e1 53       	subi	r30, 0x31	; 49
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	80 81       	ld	r24, Z
     6cc:	8c bf       	out	0x3c, r24	; 60
     6ce:	08 95       	ret

000006d0 <__vector_3>:
		//SelectNote();
		//SelectLength();
	}
}

ISR(TIMER2_COMP_vect) {
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
	if (is_playing == notPlaying) {
     6fa:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <is_playing>
     6fe:	88 23       	and	r24, r24
     700:	09 f4       	brne	.+2      	; 0x704 <__vector_3+0x34>
     702:	91 c0       	rjmp	.+290    	; 0x826 <__vector_3+0x156>
		return;
	}
	
	if (is_playing == playingMelody){
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	09 f0       	breq	.+2      	; 0x70a <__vector_3+0x3a>
     708:	5d c0       	rjmp	.+186    	; 0x7c4 <__vector_3+0xf4>
		if (timer_counter > 0.0) {
     70a:	c0 90 06 03 	lds	r12, 0x0306	; 0x800306 <timer_counter>
     70e:	d0 90 07 03 	lds	r13, 0x0307	; 0x800307 <timer_counter+0x1>
     712:	e0 90 08 03 	lds	r14, 0x0308	; 0x800308 <timer_counter+0x2>
     716:	f0 90 09 03 	lds	r15, 0x0309	; 0x800309 <timer_counter+0x3>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	a9 01       	movw	r20, r18
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 0c 09 	call	0x1218	; 0x1218 <__gesf2>
     728:	18 16       	cp	r1, r24
     72a:	04 f5       	brge	.+64     	; 0x76c <__vector_3+0x9c>
			timer_counter -= 1.0;
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 76 07 	call	0xeec	; 0xeec <__subsf3>
     73c:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <timer_counter>
     740:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <timer_counter+0x1>
     744:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <timer_counter+0x2>
     748:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <timer_counter+0x3>
			if (timer_counter <= 0.0) {
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	a9 01       	movw	r20, r18
     752:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__cmpsf2>
     756:	18 16       	cp	r1, r24
     758:	ac f1       	brlt	.+106    	; 0x7c4 <__vector_3+0xf4>
				TCCR0 &= ~_BV(COM00);
     75a:	83 b7       	in	r24, 0x33	; 51
     75c:	8f 7e       	andi	r24, 0xEF	; 239
     75e:	83 bf       	out	0x33, r24	; 51
				melody_index++;
     760:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <melody_index>
     76a:	2c c0       	rjmp	.+88     	; 0x7c4 <__vector_3+0xf4>
			}
		} else {
			PlayNote(melody[melody_index][0]);
     76c:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 58       	subi	r30, 0x8E	; 142
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	80 81       	ld	r24, Z
     77c:	0e 94 44 03 	call	0x688	; 0x688 <PlayNote>
			timer_counter = GetNoteLength(melody[melody_index][1]) * timer_length * 1000.0;
     780:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ee 58       	subi	r30, 0x8E	; 142
     78c:	fe 4f       	sbci	r31, 0xFE	; 254
     78e:	81 81       	ldd	r24, Z+1	; 0x01
     790:	0e 94 fd 01 	call	0x3fa	; 0x3fa <GetNoteLength>
     794:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     798:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     79c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     7a0:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     7a4:	0e 94 11 09 	call	0x1222	; 0x1222 <__mulsf3>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	4a e7       	ldi	r20, 0x7A	; 122
     7ae:	54 e4       	ldi	r21, 0x44	; 68
     7b0:	0e 94 11 09 	call	0x1222	; 0x1222 <__mulsf3>
     7b4:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <timer_counter>
     7b8:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <timer_counter+0x1>
     7bc:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <timer_counter+0x2>
     7c0:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <timer_counter+0x3>
		}
	}
	
	if (is_playing == playSingleNote) {
     7c4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <is_playing>
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	69 f5       	brne	.+90     	; 0x826 <__vector_3+0x156>
		if (timer_counter > 0.0) {
     7cc:	c0 90 06 03 	lds	r12, 0x0306	; 0x800306 <timer_counter>
     7d0:	d0 90 07 03 	lds	r13, 0x0307	; 0x800307 <timer_counter+0x1>
     7d4:	e0 90 08 03 	lds	r14, 0x0308	; 0x800308 <timer_counter+0x2>
     7d8:	f0 90 09 03 	lds	r15, 0x0309	; 0x800309 <timer_counter+0x3>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	a9 01       	movw	r20, r18
     7e2:	c7 01       	movw	r24, r14
     7e4:	b6 01       	movw	r22, r12
     7e6:	0e 94 0c 09 	call	0x1218	; 0x1218 <__gesf2>
     7ea:	18 16       	cp	r1, r24
     7ec:	e4 f4       	brge	.+56     	; 0x826 <__vector_3+0x156>
			timer_counter -= 1.0;
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e8       	ldi	r20, 0x80	; 128
     7f4:	5f e3       	ldi	r21, 0x3F	; 63
     7f6:	c7 01       	movw	r24, r14
     7f8:	b6 01       	movw	r22, r12
     7fa:	0e 94 76 07 	call	0xeec	; 0xeec <__subsf3>
     7fe:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <timer_counter>
     802:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <timer_counter+0x1>
     806:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <timer_counter+0x2>
     80a:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <timer_counter+0x3>
			if (timer_counter <= 0.0) {
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	a9 01       	movw	r20, r18
     814:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__cmpsf2>
     818:	18 16       	cp	r1, r24
     81a:	2c f0       	brlt	.+10     	; 0x826 <__vector_3+0x156>
				TCCR0 &= ~_BV(COM00);
     81c:	83 b7       	in	r24, 0x33	; 51
     81e:	8f 7e       	andi	r24, 0xEF	; 239
     820:	83 bf       	out	0x33, r24	; 51
				is_playing = notPlaying;
     822:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <is_playing>
			}
		}
	}
}
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <PlaySingleNote>:
		}
	}
}

void PlaySingleNote(u8 note_idx) {
	PlayNote(note_idx);
     850:	0e 94 44 03 	call	0x688	; 0x688 <PlayNote>
	timer_counter = 1000.0;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	aa e7       	ldi	r26, 0x7A	; 122
     85a:	b4 e4       	ldi	r27, 0x44	; 68
     85c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <timer_counter>
     860:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <timer_counter+0x1>
     864:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <timer_counter+0x2>
     868:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <timer_counter+0x3>
	is_playing = playSingleNote;
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <is_playing>
     872:	08 95       	ret

00000874 <PrintNote>:
		}
		OCR0 = noteDefinitions[note_idx][0];
	}
}

void PrintNote(u8 note_idx) {
     874:	cf 93       	push	r28
     876:	c8 2f       	mov	r28, r24
	if (note_idx == 0) {
     878:	81 11       	cpse	r24, r1
     87a:	05 c0       	rjmp	.+10     	; 0x886 <PrintNote+0x12>
		lcd_puts("---");
     87c:	83 e8       	ldi	r24, 0x83	; 131
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		return;
     884:	61 c0       	rjmp	.+194    	; 0x948 <PrintNote+0xd4>
	}
	switch (note_idx % 12) {
     886:	4b ea       	ldi	r20, 0xAB	; 171
     888:	84 9f       	mul	r24, r20
     88a:	41 2d       	mov	r20, r1
     88c:	11 24       	eor	r1, r1
     88e:	e4 2f       	mov	r30, r20
     890:	e6 95       	lsr	r30
     892:	e6 95       	lsr	r30
     894:	e6 95       	lsr	r30
     896:	4e 2f       	mov	r20, r30
     898:	44 0f       	add	r20, r20
     89a:	4e 0f       	add	r20, r30
     89c:	84 2f       	mov	r24, r20
     89e:	88 0f       	add	r24, r24
     8a0:	88 0f       	add	r24, r24
     8a2:	ec 2f       	mov	r30, r28
     8a4:	e8 1b       	sub	r30, r24
     8a6:	4e 2f       	mov	r20, r30
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	4c 30       	cpi	r20, 0x0C	; 12
     8ac:	51 05       	cpc	r21, r1
     8ae:	08 f0       	brcs	.+2      	; 0x8b2 <PrintNote+0x3e>
     8b0:	40 c0       	rjmp	.+128    	; 0x932 <PrintNote+0xbe>
     8b2:	fa 01       	movw	r30, r20
     8b4:	e6 5d       	subi	r30, 0xD6	; 214
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__tablejump2__>
	case 0:
		lcd_puts("B ");
     8bc:	87 e8       	ldi	r24, 0x87	; 135
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     8c4:	36 c0       	rjmp	.+108    	; 0x932 <PrintNote+0xbe>
	case 1:
		lcd_puts("C ");
     8c6:	8a e8       	ldi	r24, 0x8A	; 138
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     8ce:	31 c0       	rjmp	.+98     	; 0x932 <PrintNote+0xbe>
	case 2:
		lcd_puts("C#");
     8d0:	8d e8       	ldi	r24, 0x8D	; 141
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     8d8:	2c c0       	rjmp	.+88     	; 0x932 <PrintNote+0xbe>
	case 3:
		lcd_puts("D ");
     8da:	80 e9       	ldi	r24, 0x90	; 144
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     8e2:	27 c0       	rjmp	.+78     	; 0x932 <PrintNote+0xbe>
	case 4:
		lcd_puts("D#");
     8e4:	83 e9       	ldi	r24, 0x93	; 147
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     8ec:	22 c0       	rjmp	.+68     	; 0x932 <PrintNote+0xbe>
	case 5:
		lcd_puts("E ");
     8ee:	86 e9       	ldi	r24, 0x96	; 150
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     8f6:	1d c0       	rjmp	.+58     	; 0x932 <PrintNote+0xbe>
	case 6:
		lcd_puts("F ");
     8f8:	89 e9       	ldi	r24, 0x99	; 153
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     900:	18 c0       	rjmp	.+48     	; 0x932 <PrintNote+0xbe>
	case 7:
		lcd_puts("F#");
     902:	8c e9       	ldi	r24, 0x9C	; 156
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     90a:	13 c0       	rjmp	.+38     	; 0x932 <PrintNote+0xbe>
	case 8:
		lcd_puts("G ");
     90c:	8f e9       	ldi	r24, 0x9F	; 159
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     914:	0e c0       	rjmp	.+28     	; 0x932 <PrintNote+0xbe>
	case 9:
		lcd_puts("G#");
     916:	82 ea       	ldi	r24, 0xA2	; 162
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     91e:	09 c0       	rjmp	.+18     	; 0x932 <PrintNote+0xbe>
	case 10:
		lcd_puts("A ");
     920:	85 ea       	ldi	r24, 0xA5	; 165
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
     928:	04 c0       	rjmp	.+8      	; 0x932 <PrintNote+0xbe>
	case 11:
		lcd_puts("A#");
     92a:	88 ea       	ldi	r24, 0xA8	; 168
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
		break;
	}
	lcd_putc('2' + ((note_idx - 1) / 12));
     932:	8c 2f       	mov	r24, r28
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	6c e0       	ldi	r22, 0x0C	; 12
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__divmodhi4>
     940:	82 e3       	ldi	r24, 0x32	; 50
     942:	86 0f       	add	r24, r22
     944:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
}
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <SelectNote>:
		sprintf(bpm_str, "%d", bpm);
		lcd_puts(bpm_str);
	}
}

u8 SelectNote() {
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
	u8 idx = a4Index;
	u8 play_note = 1;
	
	lcd_clrscr();
     950:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_gotoxy(5, 0);
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	85 e0       	ldi	r24, 0x05	; 5
     958:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	lcd_puts("A: Select");
     95c:	8b ea       	ldi	r24, 0xAB	; 171
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	lcd_gotoxy(5, 1);
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	lcd_puts("B: Cancel");
     96c:	85 eb       	ldi	r24, 0xB5	; 181
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	lcd_command(LCD_DISP_ON);
     974:	8c e0       	ldi	r24, 0x0C	; 12
     976:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
	}
}

u8 SelectNote() {
	u8 idx = a4Index;
	u8 play_note = 1;
     97a:	d1 e0       	ldi	r29, 0x01	; 1
		lcd_puts(bpm_str);
	}
}

u8 SelectNote() {
	u8 idx = a4Index;
     97c:	c2 e2       	ldi	r28, 0x22	; 34
     97e:	0b c0       	rjmp	.+22     	; 0x996 <SelectNote+0x4a>
			break;
		case '0':
			return 0;
			break;
		case '5':
			play_note = 1;
     980:	d1 e0       	ldi	r29, 0x01	; 1
     982:	09 c0       	rjmp	.+18     	; 0x996 <SelectNote+0x4a>
			break;
		case '4':
			if (idx > 1) {
				idx--;
			}
			play_note = 1;
     984:	d1 e0       	ldi	r29, 0x01	; 1
     986:	07 c0       	rjmp	.+14     	; 0x996 <SelectNote+0x4a>
			break;
		case '6':
			if (idx + 1 < noteDefSize) {
				idx++;
			}
			play_note = 1;
     988:	d1 e0       	ldi	r29, 0x01	; 1
     98a:	05 c0       	rjmp	.+10     	; 0x996 <SelectNote+0x4a>
			if (idx + 12 < noteDefSize) {
				idx += 12;
			} else {
				idx = noteDefSize - 1;
			}
			play_note = 1;
     98c:	d1 e0       	ldi	r29, 0x01	; 1
			break;
		case '2':
			if (idx + 12 < noteDefSize) {
				idx += 12;
			} else {
				idx = noteDefSize - 1;
     98e:	cc e3       	ldi	r28, 0x3C	; 60
     990:	02 c0       	rjmp	.+4      	; 0x996 <SelectNote+0x4a>
			if (idx > 12) {
				idx -= 12;
			} else {
				idx = 1;
			}
			play_note = 1;
     992:	d1 e0       	ldi	r29, 0x01	; 1
			break;
		case '8':
			if (idx > 12) {
				idx -= 12;
			} else {
				idx = 1;
     994:	c1 e0       	ldi	r28, 0x01	; 1
	lcd_puts("A: Select");
	lcd_gotoxy(5, 1);
	lcd_puts("B: Cancel");
	lcd_command(LCD_DISP_ON);
	while (1) {
		if (play_note) {
     996:	dd 23       	and	r29, r29
     998:	21 f0       	breq	.+8      	; 0x9a2 <SelectNote+0x56>
			PlaySingleNote(idx);
     99a:	8c 2f       	mov	r24, r28
     99c:	0e 94 28 04 	call	0x850	; 0x850 <PlaySingleNote>
			play_note = 0;
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		lcd_gotoxy(0, 0);
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
		PrintNote(idx);
     9aa:	8c 2f       	mov	r24, r28
     9ac:	0e 94 3a 04 	call	0x874	; 0x874 <PrintNote>
		
		char resp = ReadFromKeypad();
     9b0:	0e 94 b8 01 	call	0x370	; 0x370 <ReadFromKeypad>
		switch (resp) {
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	fc 01       	movw	r30, r24
     9b8:	f0 97       	sbiw	r30, 0x30	; 48
     9ba:	e3 31       	cpi	r30, 0x13	; 19
     9bc:	f1 05       	cpc	r31, r1
     9be:	58 f7       	brcc	.-42     	; 0x996 <SelectNote+0x4a>
     9c0:	ea 5c       	subi	r30, 0xCA	; 202
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__tablejump2__>
			break;
		case 'B':
			return 255;
			break;
		case '0':
			return 0;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	1d c0       	rjmp	.+58     	; 0xa06 <SelectNote+0xba>
			break;
		case '5':
			play_note = 1;
			break;
		case '4':
			if (idx > 1) {
     9cc:	c2 30       	cpi	r28, 0x02	; 2
     9ce:	d0 f2       	brcs	.-76     	; 0x984 <SelectNote+0x38>
				idx--;
     9d0:	c1 50       	subi	r28, 0x01	; 1
			}
			play_note = 1;
     9d2:	d1 e0       	ldi	r29, 0x01	; 1
     9d4:	e0 cf       	rjmp	.-64     	; 0x996 <SelectNote+0x4a>
			break;
		case '6':
			if (idx + 1 < noteDefSize) {
     9d6:	8c 2f       	mov	r24, r28
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	cd 97       	sbiw	r24, 0x3d	; 61
     9de:	a4 f6       	brge	.-88     	; 0x988 <SelectNote+0x3c>
				idx++;
     9e0:	cf 5f       	subi	r28, 0xFF	; 255
			}
			play_note = 1;
     9e2:	d1 e0       	ldi	r29, 0x01	; 1
     9e4:	d8 cf       	rjmp	.-80     	; 0x996 <SelectNote+0x4a>
			break;
		case '2':
			if (idx + 12 < noteDefSize) {
     9e6:	8c 2f       	mov	r24, r28
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0c 96       	adiw	r24, 0x0c	; 12
     9ec:	cd 97       	sbiw	r24, 0x3d	; 61
     9ee:	74 f6       	brge	.-100    	; 0x98c <SelectNote+0x40>
				idx += 12;
     9f0:	c4 5f       	subi	r28, 0xF4	; 244
			} else {
				idx = noteDefSize - 1;
			}
			play_note = 1;
     9f2:	d1 e0       	ldi	r29, 0x01	; 1
     9f4:	d0 cf       	rjmp	.-96     	; 0x996 <SelectNote+0x4a>
			break;
		case '8':
			if (idx > 12) {
     9f6:	cd 30       	cpi	r28, 0x0D	; 13
     9f8:	60 f2       	brcs	.-104    	; 0x992 <SelectNote+0x46>
				idx -= 12;
     9fa:	cc 50       	subi	r28, 0x0C	; 12
			} else {
				idx = 1;
			}
			play_note = 1;
     9fc:	d1 e0       	ldi	r29, 0x01	; 1
     9fe:	cb cf       	rjmp	.-106    	; 0x996 <SelectNote+0x4a>
		switch (resp) {
		case 'A':
			return idx;
			break;
		case 'B':
			return 255;
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <SelectNote+0xba>
		PrintNote(idx);
		
		char resp = ReadFromKeypad();
		switch (resp) {
		case 'A':
			return idx;
     a04:	8c 2f       	mov	r24, r28
			break;
		}
		
		//_delay_ms(1);
	}
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <InsertNote>:

u8 IsNoteEOF(u8 note_idx) {
	return melody[melody_index][1] == 0;
}

void InsertNote(u8 melody_idx) {
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	c8 2f       	mov	r28, r24
	u8 note = SelectNote();
     a12:	0e 94 a6 04 	call	0x94c	; 0x94c <SelectNote>
     a16:	d8 2f       	mov	r29, r24
	if (note == 255) {
     a18:	8f 3f       	cpi	r24, 0xFF	; 255
     a1a:	c1 f0       	breq	.+48     	; 0xa4c <InsertNote+0x40>
		return;
	}
	u8 length = SelectLength();
     a1c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SelectLength>
	if (length == 255) {
     a20:	8f 3f       	cpi	r24, 0xFF	; 255
     a22:	11 f4       	brne	.+4      	; 0xa28 <InsertNote+0x1c>
     a24:	13 c0       	rjmp	.+38     	; 0xa4c <InsertNote+0x40>
		tmp = melody[melody_idx][0];
		melody[melody_idx][0] = note;
		note = tmp;
		tmp = melody[melody_idx][1];
		melody[melody_idx][1] = length;
		length = tmp;
     a26:	82 2f       	mov	r24, r18
	if (length == 255) {
		return;
	}
	u8 tmp;
	do {
		tmp = melody[melody_idx][0];
     a28:	ec 2f       	mov	r30, r28
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	ee 58       	subi	r30, 0x8E	; 142
     a32:	fe 4f       	sbci	r31, 0xFE	; 254
     a34:	90 81       	ld	r25, Z
		melody[melody_idx][0] = note;
     a36:	d0 83       	st	Z, r29
		note = tmp;
		tmp = melody[melody_idx][1];
     a38:	21 81       	ldd	r18, Z+1	; 0x01
		melody[melody_idx][1] = length;
     a3a:	81 83       	std	Z+1, r24	; 0x01
		length = tmp;
	} while (melody[melody_idx++][1] != 0x00);
     a3c:	cf 5f       	subi	r28, 0xFF	; 255
	}
	u8 tmp;
	do {
		tmp = melody[melody_idx][0];
		melody[melody_idx][0] = note;
		note = tmp;
     a3e:	d9 2f       	mov	r29, r25
		tmp = melody[melody_idx][1];
		melody[melody_idx][1] = length;
		length = tmp;
	} while (melody[melody_idx++][1] != 0x00);
     a40:	81 11       	cpse	r24, r1
     a42:	f1 cf       	rjmp	.-30     	; 0xa26 <InsertNote+0x1a>
	melody[melodyLimit - 1][0] = 0x00;
     a44:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end+0x18e>
	melody[melodyLimit - 1][1] = 0x00;
     a48:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <__data_end+0x18f>
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <ReplaceNote>:

void ReplaceNote(u8 melody_idx) {
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
	if (melody[melody_idx][1] == 0) {
     a58:	c8 2f       	mov	r28, r24
     a5a:	d0 e0       	ldi	r29, 0x00	; 0
     a5c:	fe 01       	movw	r30, r28
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	ee 58       	subi	r30, 0x8E	; 142
     a64:	fe 4f       	sbci	r31, 0xFE	; 254
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	91 11       	cpse	r25, r1
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <ReplaceNote+0x20>
		InsertNote(melody_idx);
     a6c:	0e 94 06 05 	call	0xa0c	; 0xa0c <InsertNote>
		return;
     a70:	0f c0       	rjmp	.+30     	; 0xa90 <ReplaceNote+0x3e>
	}
	u8 note = SelectNote();
     a72:	0e 94 a6 04 	call	0x94c	; 0x94c <SelectNote>
     a76:	18 2f       	mov	r17, r24
	if (note == 255) {
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	51 f0       	breq	.+20     	; 0xa90 <ReplaceNote+0x3e>
		return;
	}
	u8 length = SelectLength();
     a7c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SelectLength>
	if (length == 255) {
     a80:	8f 3f       	cpi	r24, 0xFF	; 255
     a82:	31 f0       	breq	.+12     	; 0xa90 <ReplaceNote+0x3e>
		return;
	}
	melody[melody_idx][0] = note;
     a84:	cc 0f       	add	r28, r28
     a86:	dd 1f       	adc	r29, r29
     a88:	ce 58       	subi	r28, 0x8E	; 142
     a8a:	de 4f       	sbci	r29, 0xFE	; 254
     a8c:	18 83       	st	Y, r17
	melody[melody_idx][1] = length;
     a8e:	89 83       	std	Y+1, r24	; 0x01
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	08 95       	ret

00000a98 <PrintNoteLength>:
		break;
	}
	lcd_putc('2' + ((note_idx - 1) / 12));
}

void PrintNoteLength(u8 note_length) {
     a98:	cf 93       	push	r28
     a9a:	c8 2f       	mov	r28, r24
	u8 nibble = note_length >> 4;
     a9c:	82 95       	swap	r24
     a9e:	8f 70       	andi	r24, 0x0F	; 15
	if (nibble > 9) {
     aa0:	8a 30       	cpi	r24, 0x0A	; 10
     aa2:	20 f0       	brcs	.+8      	; 0xaac <PrintNoteLength+0x14>
		lcd_putc('A' + nibble - 10);
     aa4:	89 5c       	subi	r24, 0xC9	; 201
     aa6:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <PrintNoteLength+0x1a>
	} else {
		lcd_putc('0' + nibble);
     aac:	80 5d       	subi	r24, 0xD0	; 208
     aae:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
	}
	nibble = note_length & 0x0F;
     ab2:	8c 2f       	mov	r24, r28
     ab4:	8f 70       	andi	r24, 0x0F	; 15
	if (nibble > 9) {
     ab6:	8a 30       	cpi	r24, 0x0A	; 10
     ab8:	20 f0       	brcs	.+8      	; 0xac2 <PrintNoteLength+0x2a>
		lcd_putc('A' + nibble - 10);
     aba:	89 5c       	subi	r24, 0xC9	; 201
     abc:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <PrintNoteLength+0x30>
	} else {
		lcd_putc('0' + nibble);
     ac2:	80 5d       	subi	r24, 0xD0	; 208
     ac4:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
	}
	return;
}
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <GenerateEditorView>:
		}
	}
}

void GenerateEditorView() {
	lcd_clrscr();
     acc:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_command(LCD_DISP_ON_CURSOR_BLINK);
     ad0:	8f e0       	ldi	r24, 0x0F	; 15
     ad2:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
	if (melody_index > 0) {
     ad6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     ada:	88 23       	and	r24, r24
     adc:	f1 f0       	breq	.+60     	; 0xb1a <GenerateEditorView+0x4e>
		lcd_gotoxy(0, 0);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
		PrintNote(melody[melody_index - 1][0]);
     ae6:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	ee 58       	subi	r30, 0x8E	; 142
     af4:	fe 4f       	sbci	r31, 0xFE	; 254
     af6:	80 81       	ld	r24, Z
     af8:	0e 94 3a 04 	call	0x874	; 0x874 <PrintNote>
		lcd_gotoxy(0, 1);
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
		PrintNoteLength(melody[melody_index - 1][1]);
     b04:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	ee 58       	subi	r30, 0x8E	; 142
     b12:	fe 4f       	sbci	r31, 0xFE	; 254
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	0e 94 4c 05 	call	0xa98	; 0xa98 <PrintNoteLength>
	}
	lcd_gotoxy(4, 0);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	PrintNote(melody[melody_index][0]);
     b22:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	ee 58       	subi	r30, 0x8E	; 142
     b2e:	fe 4f       	sbci	r31, 0xFE	; 254
     b30:	80 81       	ld	r24, Z
     b32:	0e 94 3a 04 	call	0x874	; 0x874 <PrintNote>
	lcd_gotoxy(4, 1);
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	PrintNoteLength(melody[melody_index][1]);
     b3e:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	ee 58       	subi	r30, 0x8E	; 142
     b4a:	fe 4f       	sbci	r31, 0xFE	; 254
     b4c:	81 81       	ldd	r24, Z+1	; 0x01
     b4e:	0e 94 4c 05 	call	0xa98	; 0xa98 <PrintNoteLength>
	if (melody[melody_index + 1][1] != 0x00) {
     b52:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	31 96       	adiw	r30, 0x01	; 1
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	ee 58       	subi	r30, 0x8E	; 142
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	88 23       	and	r24, r24
     b66:	09 f4       	brne	.+2      	; 0xb6a <GenerateEditorView+0x9e>
     b68:	47 c0       	rjmp	.+142    	; 0xbf8 <GenerateEditorView+0x12c>
		lcd_gotoxy(8, 0);
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	88 e0       	ldi	r24, 0x08	; 8
     b6e:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
		PrintNote(melody[melody_index + 1][0]);
     b72:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	31 96       	adiw	r30, 0x01	; 1
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	ee 58       	subi	r30, 0x8E	; 142
     b80:	fe 4f       	sbci	r31, 0xFE	; 254
     b82:	80 81       	ld	r24, Z
     b84:	0e 94 3a 04 	call	0x874	; 0x874 <PrintNote>
		lcd_gotoxy(8, 1);
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	88 e0       	ldi	r24, 0x08	; 8
     b8c:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
		PrintNoteLength(melody[melody_index + 1][1]);	
     b90:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	31 96       	adiw	r30, 0x01	; 1
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	ee 58       	subi	r30, 0x8E	; 142
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	0e 94 4c 05 	call	0xa98	; 0xa98 <PrintNoteLength>
		if (melody[melody_index + 2][1] != 0x00) {
     ba6:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	32 96       	adiw	r30, 0x02	; 2
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	ee 58       	subi	r30, 0x8E	; 142
     bb4:	fe 4f       	sbci	r31, 0xFE	; 254
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	88 23       	and	r24, r24
     bba:	f1 f0       	breq	.+60     	; 0xbf8 <GenerateEditorView+0x12c>
			lcd_gotoxy(12, 0);
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	8c e0       	ldi	r24, 0x0C	; 12
     bc0:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
			PrintNote(melody[melody_index + 2][0]);
     bc4:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	32 96       	adiw	r30, 0x02	; 2
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ee 58       	subi	r30, 0x8E	; 142
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 81       	ld	r24, Z
     bd6:	0e 94 3a 04 	call	0x874	; 0x874 <PrintNote>
			lcd_gotoxy(12, 1);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	8c e0       	ldi	r24, 0x0C	; 12
     bde:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
			PrintNoteLength(melody[melody_index + 2][1]);
     be2:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	32 96       	adiw	r30, 0x02	; 2
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ee 58       	subi	r30, 0x8E	; 142
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	81 81       	ldd	r24, Z+1	; 0x01
     bf4:	0e 94 4c 05 	call	0xa98	; 0xa98 <PrintNoteLength>
		}
	}
	lcd_gotoxy(4, 0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
     c00:	08 95       	ret

00000c02 <PlayMelody>:
		_delay_ms(btn_delay_ms);
	}
	return '\0';
}

void PlayMelody() {
     c02:	cf 93       	push	r28
	//melody_index = 0;
	timer_counter = 0.0;
     c04:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <timer_counter>
     c08:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <timer_counter+0x1>
     c0c:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <timer_counter+0x2>
     c10:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <timer_counter+0x3>
	is_playing = 1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <is_playing>
	while (!IsNoteEOF(melody_index) && melody_index < melodyLimit) {
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <PlayMelody+0x26>
		char response = ReadFromKeypad();
     c1c:	0e 94 b8 01 	call	0x370	; 0x370 <ReadFromKeypad>
		if (response == 'A') {
     c20:	81 34       	cpi	r24, 0x41	; 65
     c22:	59 f0       	breq	.+22     	; 0xc3a <PlayMelody+0x38>
			break;
		}
		GenerateEditorView();
     c24:	0e 94 66 05 	call	0xacc	; 0xacc <GenerateEditorView>

void PlayMelody() {
	//melody_index = 0;
	timer_counter = 0.0;
	is_playing = 1;
	while (!IsNoteEOF(melody_index) && melody_index < melodyLimit) {
     c28:	c0 91 05 03 	lds	r28, 0x0305	; 0x800305 <melody_index>
     c2c:	8c 2f       	mov	r24, r28
     c2e:	0e 94 24 02 	call	0x448	; 0x448 <IsNoteEOF>
     c32:	81 11       	cpse	r24, r1
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <PlayMelody+0x38>
     c36:	c8 3c       	cpi	r28, 0xC8	; 200
     c38:	88 f3       	brcs	.-30     	; 0xc1c <PlayMelody+0x1a>
		if (response == 'A') {
			break;
		}
		GenerateEditorView();
	}
	is_playing = 0;
     c3a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <is_playing>
	TCCR0 &= ~_BV(COM00);
     c3e:	83 b7       	in	r24, 0x33	; 51
     c40:	8f 7e       	andi	r24, 0xEF	; 239
     c42:	83 bf       	out	0x33, r24	; 51
	return;
}
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <CleanMelody>:
	melody_index = 0;
}

void CleanMelody() {
	u8 is_finished = 0;
	for (u8 i = 0; i < melodyLimit + 1; i++) {
     c48:	20 e0       	ldi	r18, 0x00	; 0
	CleanMelody();
	melody_index = 0;
}

void CleanMelody() {
	u8 is_finished = 0;
     c4a:	30 e0       	ldi	r19, 0x00	; 0
	for (u8 i = 0; i < melodyLimit + 1; i++) {
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <CleanMelody+0x2e>
		if (is_finished) {
     c4e:	33 23       	and	r19, r19
     c50:	41 f0       	breq	.+16     	; 0xc62 <CleanMelody+0x1a>
			melody[i][0] = 0x00;
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	fc 01       	movw	r30, r24
     c58:	ee 58       	subi	r30, 0x8E	; 142
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	10 82       	st	Z, r1
			melody[i][1] = 0x00;
     c5e:	11 82       	std	Z+1, r1	; 0x01
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <CleanMelody+0x2c>
		} else {
			if (melody[i][1] == 0x00) {
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	fc 01       	movw	r30, r24
     c68:	ee 58       	subi	r30, 0x8E	; 142
     c6a:	fe 4f       	sbci	r31, 0xFE	; 254
     c6c:	81 81       	ldd	r24, Z+1	; 0x01
     c6e:	81 11       	cpse	r24, r1
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <CleanMelody+0x2c>
				is_finished = 1;
     c72:	31 e0       	ldi	r19, 0x01	; 1
	melody_index = 0;
}

void CleanMelody() {
	u8 is_finished = 0;
	for (u8 i = 0; i < melodyLimit + 1; i++) {
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	82 2f       	mov	r24, r18
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	89 3c       	cpi	r24, 0xC9	; 201
     c7c:	91 05       	cpc	r25, r1
     c7e:	3c f3       	brlt	.-50     	; 0xc4e <CleanMelody+0x6>
			if (melody[i][1] == 0x00) {
				is_finished = 1;
			}
		}
	}
     c80:	08 95       	ret

00000c82 <SaveToEEPROM>:
		lcd_putc('0' + nibble);
	}
	return;
}

void SaveToEEPROM() {
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
	lcd_clrscr();
     c86:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_command(LCD_DISP_ON);
     c8a:	8c e0       	ldi	r24, 0x0C	; 12
     c8c:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
	lcd_puts("A: Save");
     c90:	8f eb       	ldi	r24, 0xBF	; 191
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	lcd_gotoxy(0, 1);
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	lcd_puts("B: Cancel");
     ca0:	85 eb       	ldi	r24, 0xB5	; 181
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	while (1) {
		u8 resp = ReadFromKeypad();
     ca8:	0e 94 b8 01 	call	0x370	; 0x370 <ReadFromKeypad>
		if (resp == 'A') {
     cac:	81 34       	cpi	r24, 0x41	; 65
     cae:	19 f0       	breq	.+6      	; 0xcb6 <SaveToEEPROM+0x34>
			break;
		} else if (resp == 'B') {
     cb0:	82 34       	cpi	r24, 0x42	; 66
     cb2:	d1 f7       	brne	.-12     	; 0xca8 <SaveToEEPROM+0x26>
     cb4:	21 c0       	rjmp	.+66     	; 0xcf8 <SaveToEEPROM+0x76>
			return;
		}
	}
	CleanMelody();
     cb6:	0e 94 24 06 	call	0xc48	; 0xc48 <CleanMelody>
	eeprom_write_word((u16*)0, beats_per_minute);
     cba:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <beats_per_minute>
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_write_word>
	for (u16 i = 1; i < melodyLimit + 2; i++) {
     cc8:	c1 e0       	ldi	r28, 0x01	; 1
     cca:	d0 e0       	ldi	r29, 0x00	; 0
     ccc:	12 c0       	rjmp	.+36     	; 0xcf2 <SaveToEEPROM+0x70>
		u16 temp = ((u16)(melody[i - 1][0]) << 8) | (u16)melody[i - 1][1];
     cce:	fe 01       	movw	r30, r28
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	ee 58       	subi	r30, 0x8E	; 142
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	60 81       	ld	r22, Z
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	76 2f       	mov	r23, r22
     ce0:	66 27       	eor	r22, r22
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	68 2b       	or	r22, r24
		eeprom_write_word((u16*)(i * 2), temp);
     ce6:	ce 01       	movw	r24, r28
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_write_word>
			return;
		}
	}
	CleanMelody();
	eeprom_write_word((u16*)0, beats_per_minute);
	for (u16 i = 1; i < melodyLimit + 2; i++) {
     cf0:	21 96       	adiw	r28, 0x01	; 1
     cf2:	ca 3c       	cpi	r28, 0xCA	; 202
     cf4:	d1 05       	cpc	r29, r1
     cf6:	58 f3       	brcs	.-42     	; 0xcce <SaveToEEPROM+0x4c>
		u16 temp = ((u16)(melody[i - 1][0]) << 8) | (u16)melody[i - 1][1];
		eeprom_write_word((u16*)(i * 2), temp);
	}
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <LoadFromEEPROM>:

void LoadFromEEPROM() {
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
	lcd_clrscr();
     d02:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_command(LCD_DISP_ON);
     d06:	8c e0       	ldi	r24, 0x0C	; 12
     d08:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
	lcd_puts("A: Load");
     d0c:	87 ec       	ldi	r24, 0xC7	; 199
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	lcd_gotoxy(0, 1);
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	lcd_puts("B: Cancel");
     d1c:	85 eb       	ldi	r24, 0xB5	; 181
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	while (1) {
		u8 resp = ReadFromKeypad();
     d24:	0e 94 b8 01 	call	0x370	; 0x370 <ReadFromKeypad>
		if (resp == 'A') {
     d28:	81 34       	cpi	r24, 0x41	; 65
     d2a:	19 f0       	breq	.+6      	; 0xd32 <LoadFromEEPROM+0x34>
			break;
		} else if (resp == 'B') {
     d2c:	82 34       	cpi	r24, 0x42	; 66
     d2e:	d1 f7       	brne	.-12     	; 0xd24 <LoadFromEEPROM+0x26>
     d30:	34 c0       	rjmp	.+104    	; 0xd9a <LoadFromEEPROM+0x9c>
			return;
		}
	}
	beats_per_minute = eeprom_read_word((u16*)0);
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <eeprom_read_word>
     d3a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <beats_per_minute>
	timer_length = 60.0 / (double)beats_per_minute;
     d3e:	68 2f       	mov	r22, r24
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__floatunsisf>
     d4a:	9b 01       	movw	r18, r22
     d4c:	ac 01       	movw	r20, r24
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e7       	ldi	r24, 0x70	; 112
     d54:	92 e4       	ldi	r25, 0x42	; 66
     d56:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
     d5a:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     d5e:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     d62:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     d66:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	for (u16 i = 1; i < melodyLimit + 2; i++) {
     d6a:	c1 e0       	ldi	r28, 0x01	; 1
     d6c:	d0 e0       	ldi	r29, 0x00	; 0
     d6e:	0e c0       	rjmp	.+28     	; 0xd8c <LoadFromEEPROM+0x8e>
		u16 data = eeprom_read_word((u16*)(i * 2));
     d70:	ce 01       	movw	r24, r28
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <eeprom_read_word>
		melody[i - 1][0] = (u8)(data >> 8);
     d7a:	fe 01       	movw	r30, r28
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 58       	subi	r30, 0x8E	; 142
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	90 83       	st	Z, r25
		melody[i - 1][1] = (u8)(data & 0x00FF);
     d88:	81 83       	std	Z+1, r24	; 0x01
			return;
		}
	}
	beats_per_minute = eeprom_read_word((u16*)0);
	timer_length = 60.0 / (double)beats_per_minute;
	for (u16 i = 1; i < melodyLimit + 2; i++) {
     d8a:	21 96       	adiw	r28, 0x01	; 1
     d8c:	ca 3c       	cpi	r28, 0xCA	; 202
     d8e:	d1 05       	cpc	r29, r1
     d90:	78 f3       	brcs	.-34     	; 0xd70 <LoadFromEEPROM+0x72>
		u16 data = eeprom_read_word((u16*)(i * 2));
		melody[i - 1][0] = (u8)(data >> 8);
		melody[i - 1][1] = (u8)(data & 0x00FF);
	}
	CleanMelody();
     d92:	0e 94 24 06 	call	0xc48	; 0xc48 <CleanMelody>
	melody_index = 0;
     d96:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <melody_index>
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <MelodyEditor>:
	}
	return total_length;
}

void MelodyEditor() {
	melody_index = 0;
     da0:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <melody_index>
	u8 regenerate_view = 1;
	u8 play_note = 1;
     da4:	d1 e0       	ldi	r29, 0x01	; 1
	return total_length;
}

void MelodyEditor() {
	melody_index = 0;
	u8 regenerate_view = 1;
     da6:	c1 e0       	ldi	r28, 0x01	; 1
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <MelodyEditor+0x10>
			break;
		case '4':
			if (melody_index > 0) {
				melody_index--;
			}
			regenerate_view = 1;
     daa:	c1 e0       	ldi	r28, 0x01	; 1
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <MelodyEditor+0x10>
			break;
		case '6':
			if (melody[melody_index + 1][1] != 0x00) {
				melody_index++;
			}
			regenerate_view = 1;
     dae:	c1 e0       	ldi	r28, 0x01	; 1
	melody_index = 0;
	u8 regenerate_view = 1;
	u8 play_note = 1;
	u8 old_value;
	while(1) {
		if (regenerate_view != 0){
     db0:	cc 23       	and	r28, r28
     db2:	91 f0       	breq	.+36     	; 0xdd8 <MelodyEditor+0x38>
			GenerateEditorView();
     db4:	0e 94 66 05 	call	0xacc	; 0xacc <GenerateEditorView>
			if (play_note != 0) {
     db8:	dd 23       	and	r29, r29
     dba:	61 f0       	breq	.+24     	; 0xdd4 <MelodyEditor+0x34>
				PlaySingleNote(melody[melody_index][0]);
     dbc:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	ee 58       	subi	r30, 0x8E	; 142
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254
     dca:	80 81       	ld	r24, Z
     dcc:	0e 94 28 04 	call	0x850	; 0x850 <PlaySingleNote>
			} else {
				play_note = 1;
			}
			regenerate_view = 0;
     dd0:	c0 e0       	ldi	r28, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <MelodyEditor+0x38>
		if (regenerate_view != 0){
			GenerateEditorView();
			if (play_note != 0) {
				PlaySingleNote(melody[melody_index][0]);
			} else {
				play_note = 1;
     dd4:	d1 e0       	ldi	r29, 0x01	; 1
			}
			regenerate_view = 0;
     dd6:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		char resp = ReadFromKeypad();
     dd8:	0e 94 b8 01 	call	0x370	; 0x370 <ReadFromKeypad>
		switch(resp) {
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	fc 01       	movw	r30, r24
     de0:	b3 97       	sbiw	r30, 0x23	; 35
     de2:	e2 32       	cpi	r30, 0x22	; 34
     de4:	f1 05       	cpc	r31, r1
     de6:	20 f7       	brcc	.-56     	; 0xdb0 <MelodyEditor+0x10>
     de8:	e7 5b       	subi	r30, 0xB7	; 183
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__tablejump2__>
		case '5':
			PlaySingleNote(melody[melody_index][0]);
     df0:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <melody_index>
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	ee 58       	subi	r30, 0x8E	; 142
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	80 81       	ld	r24, Z
     e00:	0e 94 28 04 	call	0x850	; 0x850 <PlaySingleNote>
			break;
     e04:	d5 cf       	rjmp	.-86     	; 0xdb0 <MelodyEditor+0x10>
		case '4':
			if (melody_index > 0) {
     e06:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     e0a:	88 23       	and	r24, r24
     e0c:	71 f2       	breq	.-100    	; 0xdaa <MelodyEditor+0xa>
				melody_index--;
     e0e:	81 50       	subi	r24, 0x01	; 1
     e10:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <melody_index>
			}
			regenerate_view = 1;
     e14:	c1 e0       	ldi	r28, 0x01	; 1
     e16:	cc cf       	rjmp	.-104    	; 0xdb0 <MelodyEditor+0x10>
			break;
		case '6':
			if (melody[melody_index + 1][1] != 0x00) {
     e18:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     e1c:	e8 2f       	mov	r30, r24
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	31 96       	adiw	r30, 0x01	; 1
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ee 58       	subi	r30, 0x8E	; 142
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	99 23       	and	r25, r25
     e2e:	09 f4       	brne	.+2      	; 0xe32 <MelodyEditor+0x92>
     e30:	be cf       	rjmp	.-132    	; 0xdae <MelodyEditor+0xe>
				melody_index++;
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <melody_index>
			}
			regenerate_view = 1;
     e38:	c1 e0       	ldi	r28, 0x01	; 1
     e3a:	ba cf       	rjmp	.-140    	; 0xdb0 <MelodyEditor+0x10>
			break;
		case '2':
			if (melody_index + 10 < melodyLimit) {
     e3c:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <melody_index>
     e40:	82 2f       	mov	r24, r18
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0a 96       	adiw	r24, 0x0a	; 10
     e46:	88 3c       	cpi	r24, 0xC8	; 200
     e48:	91 05       	cpc	r25, r1
     e4a:	24 f4       	brge	.+8      	; 0xe54 <MelodyEditor+0xb4>
				melody_index += 10;
     e4c:	26 5f       	subi	r18, 0xF6	; 246
     e4e:	20 93 05 03 	sts	0x0305, r18	; 0x800305 <melody_index>
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <MelodyEditor+0xc2>
			} else {
				melody_index = melodyLimit - 1;
     e54:	87 ec       	ldi	r24, 0xC7	; 199
     e56:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <melody_index>
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <MelodyEditor+0xc2>
			}
			while (melody[melody_index][1] == 0x00) {
				melody_index--;
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <melody_index>
			if (melody_index + 10 < melodyLimit) {
				melody_index += 10;
			} else {
				melody_index = melodyLimit - 1;
			}
			while (melody[melody_index][1] == 0x00) {
     e62:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     e66:	e8 2f       	mov	r30, r24
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	ee 0f       	add	r30, r30
     e6c:	ff 1f       	adc	r31, r31
     e6e:	ee 58       	subi	r30, 0x8E	; 142
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	99 23       	and	r25, r25
     e76:	91 f3       	breq	.-28     	; 0xe5c <MelodyEditor+0xbc>
				melody_index--;
			}
			regenerate_view = 1;
     e78:	c1 e0       	ldi	r28, 0x01	; 1
     e7a:	9a cf       	rjmp	.-204    	; 0xdb0 <MelodyEditor+0x10>
			break;
		case '8':
			if (melody_index >= 12) {
     e7c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     e80:	8c 30       	cpi	r24, 0x0C	; 12
     e82:	28 f0       	brcs	.+10     	; 0xe8e <MelodyEditor+0xee>
				melody_index -= 12;
     e84:	8c 50       	subi	r24, 0x0C	; 12
     e86:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <melody_index>
			} else {
				melody_index = 0;
			}
			regenerate_view = 1;
     e8a:	c1 e0       	ldi	r28, 0x01	; 1
     e8c:	91 cf       	rjmp	.-222    	; 0xdb0 <MelodyEditor+0x10>
			break;
		case '8':
			if (melody_index >= 12) {
				melody_index -= 12;
			} else {
				melody_index = 0;
     e8e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <melody_index>
			}
			regenerate_view = 1;
     e92:	c1 e0       	ldi	r28, 0x01	; 1
     e94:	8d cf       	rjmp	.-230    	; 0xdb0 <MelodyEditor+0x10>
			break;
		case 'A':
			InsertNote(melody_index);
     e96:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     e9a:	0e 94 06 05 	call	0xa0c	; 0xa0c <InsertNote>
			regenerate_view = 1;
     e9e:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     ea0:	87 cf       	rjmp	.-242    	; 0xdb0 <MelodyEditor+0x10>
		case 'B':
			ReplaceNote(melody_index);
     ea2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     ea6:	0e 94 29 05 	call	0xa52	; 0xa52 <ReplaceNote>
			regenerate_view = 1;
     eaa:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     eac:	81 cf       	rjmp	.-254    	; 0xdb0 <MelodyEditor+0x10>
		case 'D':
			DeleteNote(melody_index);
     eae:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <melody_index>
     eb2:	0e 94 30 02 	call	0x460	; 0x460 <DeleteNote>
			regenerate_view = 1;
     eb6:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     eb8:	7b cf       	rjmp	.-266    	; 0xdb0 <MelodyEditor+0x10>
		case 'C':
			SetBPM();
     eba:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SetBPM>
			regenerate_view = 1;
     ebe:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     ec0:	77 cf       	rjmp	.-274    	; 0xdb0 <MelodyEditor+0x10>
		case '*':
			SaveToEEPROM();
     ec2:	0e 94 41 06 	call	0xc82	; 0xc82 <SaveToEEPROM>
			regenerate_view = 1;
     ec6:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     ec8:	73 cf       	rjmp	.-282    	; 0xdb0 <MelodyEditor+0x10>
		case '0':
			old_value = melody_index;
     eca:	c0 91 05 03 	lds	r28, 0x0305	; 0x800305 <melody_index>
			PlayMelody();
     ece:	0e 94 01 06 	call	0xc02	; 0xc02 <PlayMelody>
			melody_index = old_value;
     ed2:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <melody_index>
			regenerate_view = 1;
			play_note = 0;
     ed6:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		case '0':
			old_value = melody_index;
			PlayMelody();
			melody_index = old_value;
			regenerate_view = 1;
     ed8:	c1 e0       	ldi	r28, 0x01	; 1
			play_note = 0;
			break;
     eda:	6a cf       	rjmp	.-300    	; 0xdb0 <MelodyEditor+0x10>
		case '#':
			LoadFromEEPROM();
     edc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <LoadFromEEPROM>
			regenerate_view = 1;
     ee0:	c1 e0       	ldi	r28, 0x01	; 1
			break;
     ee2:	66 cf       	rjmp	.-308    	; 0xdb0 <MelodyEditor+0x10>

00000ee4 <main>:
void LoadFromEEPROM();
void CleanMelody();

int main() {
	
	SetUpRegisters();
     ee4:	0e 94 9c 01 	call	0x338	; 0x338 <SetUpRegisters>
	
	while (1) {
		MelodyEditor();
     ee8:	0e 94 d0 06 	call	0xda0	; 0xda0 <MelodyEditor>

00000eec <__subsf3>:
     eec:	50 58       	subi	r21, 0x80	; 128

00000eee <__addsf3>:
     eee:	bb 27       	eor	r27, r27
     ef0:	aa 27       	eor	r26, r26
     ef2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__addsf3x>
     ef6:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_round>
     efa:	0e 94 c4 08 	call	0x1188	; 0x1188 <__fp_pscA>
     efe:	38 f0       	brcs	.+14     	; 0xf0e <__addsf3+0x20>
     f00:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_pscB>
     f04:	20 f0       	brcs	.+8      	; 0xf0e <__addsf3+0x20>
     f06:	39 f4       	brne	.+14     	; 0xf16 <__addsf3+0x28>
     f08:	9f 3f       	cpi	r25, 0xFF	; 255
     f0a:	19 f4       	brne	.+6      	; 0xf12 <__addsf3+0x24>
     f0c:	26 f4       	brtc	.+8      	; 0xf16 <__addsf3+0x28>
     f0e:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_nan>
     f12:	0e f4       	brtc	.+2      	; 0xf16 <__addsf3+0x28>
     f14:	e0 95       	com	r30
     f16:	e7 fb       	bst	r30, 7
     f18:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__fp_inf>

00000f1c <__addsf3x>:
     f1c:	e9 2f       	mov	r30, r25
     f1e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_split3>
     f22:	58 f3       	brcs	.-42     	; 0xefa <__addsf3+0xc>
     f24:	ba 17       	cp	r27, r26
     f26:	62 07       	cpc	r22, r18
     f28:	73 07       	cpc	r23, r19
     f2a:	84 07       	cpc	r24, r20
     f2c:	95 07       	cpc	r25, r21
     f2e:	20 f0       	brcs	.+8      	; 0xf38 <__addsf3x+0x1c>
     f30:	79 f4       	brne	.+30     	; 0xf50 <__addsf3x+0x34>
     f32:	a6 f5       	brtc	.+104    	; 0xf9c <__addsf3x+0x80>
     f34:	0c 94 05 09 	jmp	0x120a	; 0x120a <__fp_zero>
     f38:	0e f4       	brtc	.+2      	; 0xf3c <__addsf3x+0x20>
     f3a:	e0 95       	com	r30
     f3c:	0b 2e       	mov	r0, r27
     f3e:	ba 2f       	mov	r27, r26
     f40:	a0 2d       	mov	r26, r0
     f42:	0b 01       	movw	r0, r22
     f44:	b9 01       	movw	r22, r18
     f46:	90 01       	movw	r18, r0
     f48:	0c 01       	movw	r0, r24
     f4a:	ca 01       	movw	r24, r20
     f4c:	a0 01       	movw	r20, r0
     f4e:	11 24       	eor	r1, r1
     f50:	ff 27       	eor	r31, r31
     f52:	59 1b       	sub	r21, r25
     f54:	99 f0       	breq	.+38     	; 0xf7c <__addsf3x+0x60>
     f56:	59 3f       	cpi	r21, 0xF9	; 249
     f58:	50 f4       	brcc	.+20     	; 0xf6e <__addsf3x+0x52>
     f5a:	50 3e       	cpi	r21, 0xE0	; 224
     f5c:	68 f1       	brcs	.+90     	; 0xfb8 <__addsf3x+0x9c>
     f5e:	1a 16       	cp	r1, r26
     f60:	f0 40       	sbci	r31, 0x00	; 0
     f62:	a2 2f       	mov	r26, r18
     f64:	23 2f       	mov	r18, r19
     f66:	34 2f       	mov	r19, r20
     f68:	44 27       	eor	r20, r20
     f6a:	58 5f       	subi	r21, 0xF8	; 248
     f6c:	f3 cf       	rjmp	.-26     	; 0xf54 <__addsf3x+0x38>
     f6e:	46 95       	lsr	r20
     f70:	37 95       	ror	r19
     f72:	27 95       	ror	r18
     f74:	a7 95       	ror	r26
     f76:	f0 40       	sbci	r31, 0x00	; 0
     f78:	53 95       	inc	r21
     f7a:	c9 f7       	brne	.-14     	; 0xf6e <__addsf3x+0x52>
     f7c:	7e f4       	brtc	.+30     	; 0xf9c <__addsf3x+0x80>
     f7e:	1f 16       	cp	r1, r31
     f80:	ba 0b       	sbc	r27, r26
     f82:	62 0b       	sbc	r22, r18
     f84:	73 0b       	sbc	r23, r19
     f86:	84 0b       	sbc	r24, r20
     f88:	ba f0       	brmi	.+46     	; 0xfb8 <__addsf3x+0x9c>
     f8a:	91 50       	subi	r25, 0x01	; 1
     f8c:	a1 f0       	breq	.+40     	; 0xfb6 <__addsf3x+0x9a>
     f8e:	ff 0f       	add	r31, r31
     f90:	bb 1f       	adc	r27, r27
     f92:	66 1f       	adc	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	c2 f7       	brpl	.-16     	; 0xf8a <__addsf3x+0x6e>
     f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <__addsf3x+0x9c>
     f9c:	ba 0f       	add	r27, r26
     f9e:	62 1f       	adc	r22, r18
     fa0:	73 1f       	adc	r23, r19
     fa2:	84 1f       	adc	r24, r20
     fa4:	48 f4       	brcc	.+18     	; 0xfb8 <__addsf3x+0x9c>
     fa6:	87 95       	ror	r24
     fa8:	77 95       	ror	r23
     faa:	67 95       	ror	r22
     fac:	b7 95       	ror	r27
     fae:	f7 95       	ror	r31
     fb0:	9e 3f       	cpi	r25, 0xFE	; 254
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <__addsf3x+0x9a>
     fb4:	b0 cf       	rjmp	.-160    	; 0xf16 <__addsf3+0x28>
     fb6:	93 95       	inc	r25
     fb8:	88 0f       	add	r24, r24
     fba:	08 f0       	brcs	.+2      	; 0xfbe <__addsf3x+0xa2>
     fbc:	99 27       	eor	r25, r25
     fbe:	ee 0f       	add	r30, r30
     fc0:	97 95       	ror	r25
     fc2:	87 95       	ror	r24
     fc4:	08 95       	ret

00000fc6 <__cmpsf2>:
     fc6:	0e 94 97 08 	call	0x112e	; 0x112e <__fp_cmp>
     fca:	08 f4       	brcc	.+2      	; 0xfce <__cmpsf2+0x8>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	08 95       	ret

00000fd0 <__divsf3>:
     fd0:	0e 94 fc 07 	call	0xff8	; 0xff8 <__divsf3x>
     fd4:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_round>
     fd8:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_pscB>
     fdc:	58 f0       	brcs	.+22     	; 0xff4 <__divsf3+0x24>
     fde:	0e 94 c4 08 	call	0x1188	; 0x1188 <__fp_pscA>
     fe2:	40 f0       	brcs	.+16     	; 0xff4 <__divsf3+0x24>
     fe4:	29 f4       	brne	.+10     	; 0xff0 <__divsf3+0x20>
     fe6:	5f 3f       	cpi	r21, 0xFF	; 255
     fe8:	29 f0       	breq	.+10     	; 0xff4 <__divsf3+0x24>
     fea:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__fp_inf>
     fee:	51 11       	cpse	r21, r1
     ff0:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_szero>
     ff4:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_nan>

00000ff8 <__divsf3x>:
     ff8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_split3>
     ffc:	68 f3       	brcs	.-38     	; 0xfd8 <__divsf3+0x8>

00000ffe <__divsf3_pse>:
     ffe:	99 23       	and	r25, r25
    1000:	b1 f3       	breq	.-20     	; 0xfee <__divsf3+0x1e>
    1002:	55 23       	and	r21, r21
    1004:	91 f3       	breq	.-28     	; 0xfea <__divsf3+0x1a>
    1006:	95 1b       	sub	r25, r21
    1008:	55 0b       	sbc	r21, r21
    100a:	bb 27       	eor	r27, r27
    100c:	aa 27       	eor	r26, r26
    100e:	62 17       	cp	r22, r18
    1010:	73 07       	cpc	r23, r19
    1012:	84 07       	cpc	r24, r20
    1014:	38 f0       	brcs	.+14     	; 0x1024 <__divsf3_pse+0x26>
    1016:	9f 5f       	subi	r25, 0xFF	; 255
    1018:	5f 4f       	sbci	r21, 0xFF	; 255
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	44 1f       	adc	r20, r20
    1020:	aa 1f       	adc	r26, r26
    1022:	a9 f3       	breq	.-22     	; 0x100e <__divsf3_pse+0x10>
    1024:	35 d0       	rcall	.+106    	; 0x1090 <__divsf3_pse+0x92>
    1026:	0e 2e       	mov	r0, r30
    1028:	3a f0       	brmi	.+14     	; 0x1038 <__divsf3_pse+0x3a>
    102a:	e0 e8       	ldi	r30, 0x80	; 128
    102c:	32 d0       	rcall	.+100    	; 0x1092 <__divsf3_pse+0x94>
    102e:	91 50       	subi	r25, 0x01	; 1
    1030:	50 40       	sbci	r21, 0x00	; 0
    1032:	e6 95       	lsr	r30
    1034:	00 1c       	adc	r0, r0
    1036:	ca f7       	brpl	.-14     	; 0x102a <__divsf3_pse+0x2c>
    1038:	2b d0       	rcall	.+86     	; 0x1090 <__divsf3_pse+0x92>
    103a:	fe 2f       	mov	r31, r30
    103c:	29 d0       	rcall	.+82     	; 0x1090 <__divsf3_pse+0x92>
    103e:	66 0f       	add	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	bb 1f       	adc	r27, r27
    1046:	26 17       	cp	r18, r22
    1048:	37 07       	cpc	r19, r23
    104a:	48 07       	cpc	r20, r24
    104c:	ab 07       	cpc	r26, r27
    104e:	b0 e8       	ldi	r27, 0x80	; 128
    1050:	09 f0       	breq	.+2      	; 0x1054 <__divsf3_pse+0x56>
    1052:	bb 0b       	sbc	r27, r27
    1054:	80 2d       	mov	r24, r0
    1056:	bf 01       	movw	r22, r30
    1058:	ff 27       	eor	r31, r31
    105a:	93 58       	subi	r25, 0x83	; 131
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
    105e:	3a f0       	brmi	.+14     	; 0x106e <__divsf3_pse+0x70>
    1060:	9e 3f       	cpi	r25, 0xFE	; 254
    1062:	51 05       	cpc	r21, r1
    1064:	78 f0       	brcs	.+30     	; 0x1084 <__divsf3_pse+0x86>
    1066:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__fp_inf>
    106a:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_szero>
    106e:	5f 3f       	cpi	r21, 0xFF	; 255
    1070:	e4 f3       	brlt	.-8      	; 0x106a <__divsf3_pse+0x6c>
    1072:	98 3e       	cpi	r25, 0xE8	; 232
    1074:	d4 f3       	brlt	.-12     	; 0x106a <__divsf3_pse+0x6c>
    1076:	86 95       	lsr	r24
    1078:	77 95       	ror	r23
    107a:	67 95       	ror	r22
    107c:	b7 95       	ror	r27
    107e:	f7 95       	ror	r31
    1080:	9f 5f       	subi	r25, 0xFF	; 255
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__divsf3_pse+0x78>
    1084:	88 0f       	add	r24, r24
    1086:	91 1d       	adc	r25, r1
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	97 f9       	bld	r25, 7
    108e:	08 95       	ret
    1090:	e1 e0       	ldi	r30, 0x01	; 1
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	bb 1f       	adc	r27, r27
    109a:	62 17       	cp	r22, r18
    109c:	73 07       	cpc	r23, r19
    109e:	84 07       	cpc	r24, r20
    10a0:	ba 07       	cpc	r27, r26
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <__divsf3_pse+0xae>
    10a4:	62 1b       	sub	r22, r18
    10a6:	73 0b       	sbc	r23, r19
    10a8:	84 0b       	sbc	r24, r20
    10aa:	ba 0b       	sbc	r27, r26
    10ac:	ee 1f       	adc	r30, r30
    10ae:	88 f7       	brcc	.-30     	; 0x1092 <__divsf3_pse+0x94>
    10b0:	e0 95       	com	r30
    10b2:	08 95       	ret

000010b4 <__floatunsisf>:
    10b4:	e8 94       	clt
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <__floatsisf+0x12>

000010b8 <__floatsisf>:
    10b8:	97 fb       	bst	r25, 7
    10ba:	3e f4       	brtc	.+14     	; 0x10ca <__floatsisf+0x12>
    10bc:	90 95       	com	r25
    10be:	80 95       	com	r24
    10c0:	70 95       	com	r23
    10c2:	61 95       	neg	r22
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	99 23       	and	r25, r25
    10cc:	a9 f0       	breq	.+42     	; 0x10f8 <__floatsisf+0x40>
    10ce:	f9 2f       	mov	r31, r25
    10d0:	96 e9       	ldi	r25, 0x96	; 150
    10d2:	bb 27       	eor	r27, r27
    10d4:	93 95       	inc	r25
    10d6:	f6 95       	lsr	r31
    10d8:	87 95       	ror	r24
    10da:	77 95       	ror	r23
    10dc:	67 95       	ror	r22
    10de:	b7 95       	ror	r27
    10e0:	f1 11       	cpse	r31, r1
    10e2:	f8 cf       	rjmp	.-16     	; 0x10d4 <__floatsisf+0x1c>
    10e4:	fa f4       	brpl	.+62     	; 0x1124 <__floatsisf+0x6c>
    10e6:	bb 0f       	add	r27, r27
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__floatsisf+0x36>
    10ea:	60 ff       	sbrs	r22, 0
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <__floatsisf+0x6c>
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	16 c0       	rjmp	.+44     	; 0x1124 <__floatsisf+0x6c>
    10f8:	88 23       	and	r24, r24
    10fa:	11 f0       	breq	.+4      	; 0x1100 <__floatsisf+0x48>
    10fc:	96 e9       	ldi	r25, 0x96	; 150
    10fe:	11 c0       	rjmp	.+34     	; 0x1122 <__floatsisf+0x6a>
    1100:	77 23       	and	r23, r23
    1102:	21 f0       	breq	.+8      	; 0x110c <__floatsisf+0x54>
    1104:	9e e8       	ldi	r25, 0x8E	; 142
    1106:	87 2f       	mov	r24, r23
    1108:	76 2f       	mov	r23, r22
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <__floatsisf+0x5e>
    110c:	66 23       	and	r22, r22
    110e:	71 f0       	breq	.+28     	; 0x112c <__floatsisf+0x74>
    1110:	96 e8       	ldi	r25, 0x86	; 134
    1112:	86 2f       	mov	r24, r22
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	2a f0       	brmi	.+10     	; 0x1124 <__floatsisf+0x6c>
    111a:	9a 95       	dec	r25
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	da f7       	brpl	.-10     	; 0x111a <__floatsisf+0x62>
    1124:	88 0f       	add	r24, r24
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret

0000112e <__fp_cmp>:
    112e:	99 0f       	add	r25, r25
    1130:	00 08       	sbc	r0, r0
    1132:	55 0f       	add	r21, r21
    1134:	aa 0b       	sbc	r26, r26
    1136:	e0 e8       	ldi	r30, 0x80	; 128
    1138:	fe ef       	ldi	r31, 0xFE	; 254
    113a:	16 16       	cp	r1, r22
    113c:	17 06       	cpc	r1, r23
    113e:	e8 07       	cpc	r30, r24
    1140:	f9 07       	cpc	r31, r25
    1142:	c0 f0       	brcs	.+48     	; 0x1174 <__fp_cmp+0x46>
    1144:	12 16       	cp	r1, r18
    1146:	13 06       	cpc	r1, r19
    1148:	e4 07       	cpc	r30, r20
    114a:	f5 07       	cpc	r31, r21
    114c:	98 f0       	brcs	.+38     	; 0x1174 <__fp_cmp+0x46>
    114e:	62 1b       	sub	r22, r18
    1150:	73 0b       	sbc	r23, r19
    1152:	84 0b       	sbc	r24, r20
    1154:	95 0b       	sbc	r25, r21
    1156:	39 f4       	brne	.+14     	; 0x1166 <__fp_cmp+0x38>
    1158:	0a 26       	eor	r0, r26
    115a:	61 f0       	breq	.+24     	; 0x1174 <__fp_cmp+0x46>
    115c:	23 2b       	or	r18, r19
    115e:	24 2b       	or	r18, r20
    1160:	25 2b       	or	r18, r21
    1162:	21 f4       	brne	.+8      	; 0x116c <__fp_cmp+0x3e>
    1164:	08 95       	ret
    1166:	0a 26       	eor	r0, r26
    1168:	09 f4       	brne	.+2      	; 0x116c <__fp_cmp+0x3e>
    116a:	a1 40       	sbci	r26, 0x01	; 1
    116c:	a6 95       	lsr	r26
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	81 1d       	adc	r24, r1
    1172:	81 1d       	adc	r24, r1
    1174:	08 95       	ret

00001176 <__fp_inf>:
    1176:	97 f9       	bld	r25, 7
    1178:	9f 67       	ori	r25, 0x7F	; 127
    117a:	80 e8       	ldi	r24, 0x80	; 128
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	08 95       	ret

00001182 <__fp_nan>:
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    1184:	80 ec       	ldi	r24, 0xC0	; 192
    1186:	08 95       	ret

00001188 <__fp_pscA>:
    1188:	00 24       	eor	r0, r0
    118a:	0a 94       	dec	r0
    118c:	16 16       	cp	r1, r22
    118e:	17 06       	cpc	r1, r23
    1190:	18 06       	cpc	r1, r24
    1192:	09 06       	cpc	r0, r25
    1194:	08 95       	ret

00001196 <__fp_pscB>:
    1196:	00 24       	eor	r0, r0
    1198:	0a 94       	dec	r0
    119a:	12 16       	cp	r1, r18
    119c:	13 06       	cpc	r1, r19
    119e:	14 06       	cpc	r1, r20
    11a0:	05 06       	cpc	r0, r21
    11a2:	08 95       	ret

000011a4 <__fp_round>:
    11a4:	09 2e       	mov	r0, r25
    11a6:	03 94       	inc	r0
    11a8:	00 0c       	add	r0, r0
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <__fp_round+0xc>
    11ac:	88 23       	and	r24, r24
    11ae:	52 f0       	brmi	.+20     	; 0x11c4 <__fp_round+0x20>
    11b0:	bb 0f       	add	r27, r27
    11b2:	40 f4       	brcc	.+16     	; 0x11c4 <__fp_round+0x20>
    11b4:	bf 2b       	or	r27, r31
    11b6:	11 f4       	brne	.+4      	; 0x11bc <__fp_round+0x18>
    11b8:	60 ff       	sbrs	r22, 0
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <__fp_round+0x20>
    11bc:	6f 5f       	subi	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	08 95       	ret

000011c6 <__fp_split3>:
    11c6:	57 fd       	sbrc	r21, 7
    11c8:	90 58       	subi	r25, 0x80	; 128
    11ca:	44 0f       	add	r20, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	59 f0       	breq	.+22     	; 0x11e6 <__fp_splitA+0x10>
    11d0:	5f 3f       	cpi	r21, 0xFF	; 255
    11d2:	71 f0       	breq	.+28     	; 0x11f0 <__fp_splitA+0x1a>
    11d4:	47 95       	ror	r20

000011d6 <__fp_splitA>:
    11d6:	88 0f       	add	r24, r24
    11d8:	97 fb       	bst	r25, 7
    11da:	99 1f       	adc	r25, r25
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <__fp_splitA+0x20>
    11de:	9f 3f       	cpi	r25, 0xFF	; 255
    11e0:	79 f0       	breq	.+30     	; 0x1200 <__fp_splitA+0x2a>
    11e2:	87 95       	ror	r24
    11e4:	08 95       	ret
    11e6:	12 16       	cp	r1, r18
    11e8:	13 06       	cpc	r1, r19
    11ea:	14 06       	cpc	r1, r20
    11ec:	55 1f       	adc	r21, r21
    11ee:	f2 cf       	rjmp	.-28     	; 0x11d4 <__fp_split3+0xe>
    11f0:	46 95       	lsr	r20
    11f2:	f1 df       	rcall	.-30     	; 0x11d6 <__fp_splitA>
    11f4:	08 c0       	rjmp	.+16     	; 0x1206 <__fp_splitA+0x30>
    11f6:	16 16       	cp	r1, r22
    11f8:	17 06       	cpc	r1, r23
    11fa:	18 06       	cpc	r1, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	f1 cf       	rjmp	.-30     	; 0x11e2 <__fp_splitA+0xc>
    1200:	86 95       	lsr	r24
    1202:	71 05       	cpc	r23, r1
    1204:	61 05       	cpc	r22, r1
    1206:	08 94       	sec
    1208:	08 95       	ret

0000120a <__fp_zero>:
    120a:	e8 94       	clt

0000120c <__fp_szero>:
    120c:	bb 27       	eor	r27, r27
    120e:	66 27       	eor	r22, r22
    1210:	77 27       	eor	r23, r23
    1212:	cb 01       	movw	r24, r22
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret

00001218 <__gesf2>:
    1218:	0e 94 97 08 	call	0x112e	; 0x112e <__fp_cmp>
    121c:	08 f4       	brcc	.+2      	; 0x1220 <__gesf2+0x8>
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__mulsf3>:
    1222:	0e 94 24 09 	call	0x1248	; 0x1248 <__mulsf3x>
    1226:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__fp_round>
    122a:	0e 94 c4 08 	call	0x1188	; 0x1188 <__fp_pscA>
    122e:	38 f0       	brcs	.+14     	; 0x123e <__mulsf3+0x1c>
    1230:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_pscB>
    1234:	20 f0       	brcs	.+8      	; 0x123e <__mulsf3+0x1c>
    1236:	95 23       	and	r25, r21
    1238:	11 f0       	breq	.+4      	; 0x123e <__mulsf3+0x1c>
    123a:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__fp_inf>
    123e:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__fp_nan>
    1242:	11 24       	eor	r1, r1
    1244:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_szero>

00001248 <__mulsf3x>:
    1248:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__fp_split3>
    124c:	70 f3       	brcs	.-36     	; 0x122a <__mulsf3+0x8>

0000124e <__mulsf3_pse>:
    124e:	95 9f       	mul	r25, r21
    1250:	c1 f3       	breq	.-16     	; 0x1242 <__mulsf3+0x20>
    1252:	95 0f       	add	r25, r21
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	55 1f       	adc	r21, r21
    1258:	62 9f       	mul	r22, r18
    125a:	f0 01       	movw	r30, r0
    125c:	72 9f       	mul	r23, r18
    125e:	bb 27       	eor	r27, r27
    1260:	f0 0d       	add	r31, r0
    1262:	b1 1d       	adc	r27, r1
    1264:	63 9f       	mul	r22, r19
    1266:	aa 27       	eor	r26, r26
    1268:	f0 0d       	add	r31, r0
    126a:	b1 1d       	adc	r27, r1
    126c:	aa 1f       	adc	r26, r26
    126e:	64 9f       	mul	r22, r20
    1270:	66 27       	eor	r22, r22
    1272:	b0 0d       	add	r27, r0
    1274:	a1 1d       	adc	r26, r1
    1276:	66 1f       	adc	r22, r22
    1278:	82 9f       	mul	r24, r18
    127a:	22 27       	eor	r18, r18
    127c:	b0 0d       	add	r27, r0
    127e:	a1 1d       	adc	r26, r1
    1280:	62 1f       	adc	r22, r18
    1282:	73 9f       	mul	r23, r19
    1284:	b0 0d       	add	r27, r0
    1286:	a1 1d       	adc	r26, r1
    1288:	62 1f       	adc	r22, r18
    128a:	83 9f       	mul	r24, r19
    128c:	a0 0d       	add	r26, r0
    128e:	61 1d       	adc	r22, r1
    1290:	22 1f       	adc	r18, r18
    1292:	74 9f       	mul	r23, r20
    1294:	33 27       	eor	r19, r19
    1296:	a0 0d       	add	r26, r0
    1298:	61 1d       	adc	r22, r1
    129a:	23 1f       	adc	r18, r19
    129c:	84 9f       	mul	r24, r20
    129e:	60 0d       	add	r22, r0
    12a0:	21 1d       	adc	r18, r1
    12a2:	82 2f       	mov	r24, r18
    12a4:	76 2f       	mov	r23, r22
    12a6:	6a 2f       	mov	r22, r26
    12a8:	11 24       	eor	r1, r1
    12aa:	9f 57       	subi	r25, 0x7F	; 127
    12ac:	50 40       	sbci	r21, 0x00	; 0
    12ae:	9a f0       	brmi	.+38     	; 0x12d6 <__mulsf3_pse+0x88>
    12b0:	f1 f0       	breq	.+60     	; 0x12ee <__mulsf3_pse+0xa0>
    12b2:	88 23       	and	r24, r24
    12b4:	4a f0       	brmi	.+18     	; 0x12c8 <__mulsf3_pse+0x7a>
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	bb 1f       	adc	r27, r27
    12bc:	66 1f       	adc	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	91 50       	subi	r25, 0x01	; 1
    12c4:	50 40       	sbci	r21, 0x00	; 0
    12c6:	a9 f7       	brne	.-22     	; 0x12b2 <__mulsf3_pse+0x64>
    12c8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ca:	51 05       	cpc	r21, r1
    12cc:	80 f0       	brcs	.+32     	; 0x12ee <__mulsf3_pse+0xa0>
    12ce:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__fp_inf>
    12d2:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_szero>
    12d6:	5f 3f       	cpi	r21, 0xFF	; 255
    12d8:	e4 f3       	brlt	.-8      	; 0x12d2 <__mulsf3_pse+0x84>
    12da:	98 3e       	cpi	r25, 0xE8	; 232
    12dc:	d4 f3       	brlt	.-12     	; 0x12d2 <__mulsf3_pse+0x84>
    12de:	86 95       	lsr	r24
    12e0:	77 95       	ror	r23
    12e2:	67 95       	ror	r22
    12e4:	b7 95       	ror	r27
    12e6:	f7 95       	ror	r31
    12e8:	e7 95       	ror	r30
    12ea:	9f 5f       	subi	r25, 0xFF	; 255
    12ec:	c1 f7       	brne	.-16     	; 0x12de <__mulsf3_pse+0x90>
    12ee:	fe 2b       	or	r31, r30
    12f0:	88 0f       	add	r24, r24
    12f2:	91 1d       	adc	r25, r1
    12f4:	96 95       	lsr	r25
    12f6:	87 95       	ror	r24
    12f8:	97 f9       	bld	r25, 7
    12fa:	08 95       	ret

000012fc <__divmodhi4>:
    12fc:	97 fb       	bst	r25, 7
    12fe:	07 2e       	mov	r0, r23
    1300:	16 f4       	brtc	.+4      	; 0x1306 <__divmodhi4+0xa>
    1302:	00 94       	com	r0
    1304:	07 d0       	rcall	.+14     	; 0x1314 <__divmodhi4_neg1>
    1306:	77 fd       	sbrc	r23, 7
    1308:	09 d0       	rcall	.+18     	; 0x131c <__divmodhi4_neg2>
    130a:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodhi4>
    130e:	07 fc       	sbrc	r0, 7
    1310:	05 d0       	rcall	.+10     	; 0x131c <__divmodhi4_neg2>
    1312:	3e f4       	brtc	.+14     	; 0x1322 <__divmodhi4_exit>

00001314 <__divmodhi4_neg1>:
    1314:	90 95       	com	r25
    1316:	81 95       	neg	r24
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	08 95       	ret

0000131c <__divmodhi4_neg2>:
    131c:	70 95       	com	r23
    131e:	61 95       	neg	r22
    1320:	7f 4f       	sbci	r23, 0xFF	; 255

00001322 <__divmodhi4_exit>:
    1322:	08 95       	ret

00001324 <__tablejump2__>:
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	05 90       	lpm	r0, Z+
    132a:	f4 91       	lpm	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	09 94       	ijmp

00001330 <__umulhisi3>:
    1330:	a2 9f       	mul	r26, r18
    1332:	b0 01       	movw	r22, r0
    1334:	b3 9f       	mul	r27, r19
    1336:	c0 01       	movw	r24, r0
    1338:	a3 9f       	mul	r26, r19
    133a:	70 0d       	add	r23, r0
    133c:	81 1d       	adc	r24, r1
    133e:	11 24       	eor	r1, r1
    1340:	91 1d       	adc	r25, r1
    1342:	b2 9f       	mul	r27, r18
    1344:	70 0d       	add	r23, r0
    1346:	81 1d       	adc	r24, r1
    1348:	11 24       	eor	r1, r1
    134a:	91 1d       	adc	r25, r1
    134c:	08 95       	ret

0000134e <__udivmodhi4>:
    134e:	aa 1b       	sub	r26, r26
    1350:	bb 1b       	sub	r27, r27
    1352:	51 e1       	ldi	r21, 0x11	; 17
    1354:	07 c0       	rjmp	.+14     	; 0x1364 <__udivmodhi4_ep>

00001356 <__udivmodhi4_loop>:
    1356:	aa 1f       	adc	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	a6 17       	cp	r26, r22
    135c:	b7 07       	cpc	r27, r23
    135e:	10 f0       	brcs	.+4      	; 0x1364 <__udivmodhi4_ep>
    1360:	a6 1b       	sub	r26, r22
    1362:	b7 0b       	sbc	r27, r23

00001364 <__udivmodhi4_ep>:
    1364:	88 1f       	adc	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	5a 95       	dec	r21
    136a:	a9 f7       	brne	.-22     	; 0x1356 <__udivmodhi4_loop>
    136c:	80 95       	com	r24
    136e:	90 95       	com	r25
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	08 95       	ret

00001376 <sprintf>:
    1376:	ae e0       	ldi	r26, 0x0E	; 14
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 ec       	ldi	r30, 0xC1	; 193
    137c:	f9 e0       	ldi	r31, 0x09	; 9
    137e:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__prologue_saves__+0x1c>
    1382:	0d 89       	ldd	r16, Y+21	; 0x15
    1384:	1e 89       	ldd	r17, Y+22	; 0x16
    1386:	86 e0       	ldi	r24, 0x06	; 6
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	1a 83       	std	Y+2, r17	; 0x02
    138c:	09 83       	std	Y+1, r16	; 0x01
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	9f e7       	ldi	r25, 0x7F	; 127
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	ae 01       	movw	r20, r28
    1398:	47 5e       	subi	r20, 0xE7	; 231
    139a:	5f 4f       	sbci	r21, 0xFF	; 255
    139c:	6f 89       	ldd	r22, Y+23	; 0x17
    139e:	78 8d       	ldd	r23, Y+24	; 0x18
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <vfprintf>
    13a8:	ef 81       	ldd	r30, Y+7	; 0x07
    13aa:	f8 85       	ldd	r31, Y+8	; 0x08
    13ac:	e0 0f       	add	r30, r16
    13ae:	f1 1f       	adc	r31, r17
    13b0:	10 82       	st	Z, r1
    13b2:	2e 96       	adiw	r28, 0x0e	; 14
    13b4:	e4 e0       	ldi	r30, 0x04	; 4
    13b6:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__epilogue_restores__+0x1c>

000013ba <vfprintf>:
    13ba:	ab e0       	ldi	r26, 0x0B	; 11
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 ee       	ldi	r30, 0xE3	; 227
    13c0:	f9 e0       	ldi	r31, 0x09	; 9
    13c2:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__prologue_saves__>
    13c6:	6c 01       	movw	r12, r24
    13c8:	7b 01       	movw	r14, r22
    13ca:	8a 01       	movw	r16, r20
    13cc:	fc 01       	movw	r30, r24
    13ce:	17 82       	std	Z+7, r1	; 0x07
    13d0:	16 82       	std	Z+6, r1	; 0x06
    13d2:	83 81       	ldd	r24, Z+3	; 0x03
    13d4:	81 ff       	sbrs	r24, 1
    13d6:	cc c1       	rjmp	.+920    	; 0x1770 <vfprintf+0x3b6>
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	3c 01       	movw	r6, r24
    13de:	f6 01       	movw	r30, r12
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	f7 01       	movw	r30, r14
    13e4:	93 fd       	sbrc	r25, 3
    13e6:	85 91       	lpm	r24, Z+
    13e8:	93 ff       	sbrs	r25, 3
    13ea:	81 91       	ld	r24, Z+
    13ec:	7f 01       	movw	r14, r30
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <vfprintf+0x3a>
    13f2:	ba c1       	rjmp	.+884    	; 0x1768 <vfprintf+0x3ae>
    13f4:	85 32       	cpi	r24, 0x25	; 37
    13f6:	39 f4       	brne	.+14     	; 0x1406 <vfprintf+0x4c>
    13f8:	93 fd       	sbrc	r25, 3
    13fa:	85 91       	lpm	r24, Z+
    13fc:	93 ff       	sbrs	r25, 3
    13fe:	81 91       	ld	r24, Z+
    1400:	7f 01       	movw	r14, r30
    1402:	85 32       	cpi	r24, 0x25	; 37
    1404:	29 f4       	brne	.+10     	; 0x1410 <vfprintf+0x56>
    1406:	b6 01       	movw	r22, r12
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    140e:	e7 cf       	rjmp	.-50     	; 0x13de <vfprintf+0x24>
    1410:	91 2c       	mov	r9, r1
    1412:	21 2c       	mov	r2, r1
    1414:	31 2c       	mov	r3, r1
    1416:	ff e1       	ldi	r31, 0x1F	; 31
    1418:	f3 15       	cp	r31, r3
    141a:	d8 f0       	brcs	.+54     	; 0x1452 <vfprintf+0x98>
    141c:	8b 32       	cpi	r24, 0x2B	; 43
    141e:	79 f0       	breq	.+30     	; 0x143e <vfprintf+0x84>
    1420:	38 f4       	brcc	.+14     	; 0x1430 <vfprintf+0x76>
    1422:	80 32       	cpi	r24, 0x20	; 32
    1424:	79 f0       	breq	.+30     	; 0x1444 <vfprintf+0x8a>
    1426:	83 32       	cpi	r24, 0x23	; 35
    1428:	a1 f4       	brne	.+40     	; 0x1452 <vfprintf+0x98>
    142a:	23 2d       	mov	r18, r3
    142c:	20 61       	ori	r18, 0x10	; 16
    142e:	1d c0       	rjmp	.+58     	; 0x146a <vfprintf+0xb0>
    1430:	8d 32       	cpi	r24, 0x2D	; 45
    1432:	61 f0       	breq	.+24     	; 0x144c <vfprintf+0x92>
    1434:	80 33       	cpi	r24, 0x30	; 48
    1436:	69 f4       	brne	.+26     	; 0x1452 <vfprintf+0x98>
    1438:	23 2d       	mov	r18, r3
    143a:	21 60       	ori	r18, 0x01	; 1
    143c:	16 c0       	rjmp	.+44     	; 0x146a <vfprintf+0xb0>
    143e:	83 2d       	mov	r24, r3
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	38 2e       	mov	r3, r24
    1444:	e3 2d       	mov	r30, r3
    1446:	e4 60       	ori	r30, 0x04	; 4
    1448:	3e 2e       	mov	r3, r30
    144a:	2a c0       	rjmp	.+84     	; 0x14a0 <vfprintf+0xe6>
    144c:	f3 2d       	mov	r31, r3
    144e:	f8 60       	ori	r31, 0x08	; 8
    1450:	1d c0       	rjmp	.+58     	; 0x148c <vfprintf+0xd2>
    1452:	37 fc       	sbrc	r3, 7
    1454:	2d c0       	rjmp	.+90     	; 0x14b0 <vfprintf+0xf6>
    1456:	20 ed       	ldi	r18, 0xD0	; 208
    1458:	28 0f       	add	r18, r24
    145a:	2a 30       	cpi	r18, 0x0A	; 10
    145c:	40 f0       	brcs	.+16     	; 0x146e <vfprintf+0xb4>
    145e:	8e 32       	cpi	r24, 0x2E	; 46
    1460:	b9 f4       	brne	.+46     	; 0x1490 <vfprintf+0xd6>
    1462:	36 fc       	sbrc	r3, 6
    1464:	81 c1       	rjmp	.+770    	; 0x1768 <vfprintf+0x3ae>
    1466:	23 2d       	mov	r18, r3
    1468:	20 64       	ori	r18, 0x40	; 64
    146a:	32 2e       	mov	r3, r18
    146c:	19 c0       	rjmp	.+50     	; 0x14a0 <vfprintf+0xe6>
    146e:	36 fe       	sbrs	r3, 6
    1470:	06 c0       	rjmp	.+12     	; 0x147e <vfprintf+0xc4>
    1472:	8a e0       	ldi	r24, 0x0A	; 10
    1474:	98 9e       	mul	r9, r24
    1476:	20 0d       	add	r18, r0
    1478:	11 24       	eor	r1, r1
    147a:	92 2e       	mov	r9, r18
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <vfprintf+0xe6>
    147e:	ea e0       	ldi	r30, 0x0A	; 10
    1480:	2e 9e       	mul	r2, r30
    1482:	20 0d       	add	r18, r0
    1484:	11 24       	eor	r1, r1
    1486:	22 2e       	mov	r2, r18
    1488:	f3 2d       	mov	r31, r3
    148a:	f0 62       	ori	r31, 0x20	; 32
    148c:	3f 2e       	mov	r3, r31
    148e:	08 c0       	rjmp	.+16     	; 0x14a0 <vfprintf+0xe6>
    1490:	8c 36       	cpi	r24, 0x6C	; 108
    1492:	21 f4       	brne	.+8      	; 0x149c <vfprintf+0xe2>
    1494:	83 2d       	mov	r24, r3
    1496:	80 68       	ori	r24, 0x80	; 128
    1498:	38 2e       	mov	r3, r24
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <vfprintf+0xe6>
    149c:	88 36       	cpi	r24, 0x68	; 104
    149e:	41 f4       	brne	.+16     	; 0x14b0 <vfprintf+0xf6>
    14a0:	f7 01       	movw	r30, r14
    14a2:	93 fd       	sbrc	r25, 3
    14a4:	85 91       	lpm	r24, Z+
    14a6:	93 ff       	sbrs	r25, 3
    14a8:	81 91       	ld	r24, Z+
    14aa:	7f 01       	movw	r14, r30
    14ac:	81 11       	cpse	r24, r1
    14ae:	b3 cf       	rjmp	.-154    	; 0x1416 <vfprintf+0x5c>
    14b0:	98 2f       	mov	r25, r24
    14b2:	9f 7d       	andi	r25, 0xDF	; 223
    14b4:	95 54       	subi	r25, 0x45	; 69
    14b6:	93 30       	cpi	r25, 0x03	; 3
    14b8:	28 f4       	brcc	.+10     	; 0x14c4 <vfprintf+0x10a>
    14ba:	0c 5f       	subi	r16, 0xFC	; 252
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	9f e3       	ldi	r25, 0x3F	; 63
    14c0:	99 83       	std	Y+1, r25	; 0x01
    14c2:	0d c0       	rjmp	.+26     	; 0x14de <vfprintf+0x124>
    14c4:	83 36       	cpi	r24, 0x63	; 99
    14c6:	31 f0       	breq	.+12     	; 0x14d4 <vfprintf+0x11a>
    14c8:	83 37       	cpi	r24, 0x73	; 115
    14ca:	71 f0       	breq	.+28     	; 0x14e8 <vfprintf+0x12e>
    14cc:	83 35       	cpi	r24, 0x53	; 83
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <vfprintf+0x118>
    14d0:	59 c0       	rjmp	.+178    	; 0x1584 <vfprintf+0x1ca>
    14d2:	21 c0       	rjmp	.+66     	; 0x1516 <vfprintf+0x15c>
    14d4:	f8 01       	movw	r30, r16
    14d6:	80 81       	ld	r24, Z
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	0e 5f       	subi	r16, 0xFE	; 254
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	88 24       	eor	r8, r8
    14e0:	83 94       	inc	r8
    14e2:	91 2c       	mov	r9, r1
    14e4:	53 01       	movw	r10, r6
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <vfprintf+0x154>
    14e8:	28 01       	movw	r4, r16
    14ea:	f2 e0       	ldi	r31, 0x02	; 2
    14ec:	4f 0e       	add	r4, r31
    14ee:	51 1c       	adc	r5, r1
    14f0:	f8 01       	movw	r30, r16
    14f2:	a0 80       	ld	r10, Z
    14f4:	b1 80       	ldd	r11, Z+1	; 0x01
    14f6:	36 fe       	sbrs	r3, 6
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <vfprintf+0x146>
    14fa:	69 2d       	mov	r22, r9
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x14a>
    1500:	6f ef       	ldi	r22, 0xFF	; 255
    1502:	7f ef       	ldi	r23, 0xFF	; 255
    1504:	c5 01       	movw	r24, r10
    1506:	0e 94 c9 0b 	call	0x1792	; 0x1792 <strnlen>
    150a:	4c 01       	movw	r8, r24
    150c:	82 01       	movw	r16, r4
    150e:	f3 2d       	mov	r31, r3
    1510:	ff 77       	andi	r31, 0x7F	; 127
    1512:	3f 2e       	mov	r3, r31
    1514:	16 c0       	rjmp	.+44     	; 0x1542 <vfprintf+0x188>
    1516:	28 01       	movw	r4, r16
    1518:	22 e0       	ldi	r18, 0x02	; 2
    151a:	42 0e       	add	r4, r18
    151c:	51 1c       	adc	r5, r1
    151e:	f8 01       	movw	r30, r16
    1520:	a0 80       	ld	r10, Z
    1522:	b1 80       	ldd	r11, Z+1	; 0x01
    1524:	36 fe       	sbrs	r3, 6
    1526:	03 c0       	rjmp	.+6      	; 0x152e <vfprintf+0x174>
    1528:	69 2d       	mov	r22, r9
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0x178>
    152e:	6f ef       	ldi	r22, 0xFF	; 255
    1530:	7f ef       	ldi	r23, 0xFF	; 255
    1532:	c5 01       	movw	r24, r10
    1534:	0e 94 be 0b 	call	0x177c	; 0x177c <strnlen_P>
    1538:	4c 01       	movw	r8, r24
    153a:	f3 2d       	mov	r31, r3
    153c:	f0 68       	ori	r31, 0x80	; 128
    153e:	3f 2e       	mov	r3, r31
    1540:	82 01       	movw	r16, r4
    1542:	33 fc       	sbrc	r3, 3
    1544:	1b c0       	rjmp	.+54     	; 0x157c <vfprintf+0x1c2>
    1546:	82 2d       	mov	r24, r2
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 16       	cp	r8, r24
    154c:	99 06       	cpc	r9, r25
    154e:	b0 f4       	brcc	.+44     	; 0x157c <vfprintf+0x1c2>
    1550:	b6 01       	movw	r22, r12
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    155a:	2a 94       	dec	r2
    155c:	f4 cf       	rjmp	.-24     	; 0x1546 <vfprintf+0x18c>
    155e:	f5 01       	movw	r30, r10
    1560:	37 fc       	sbrc	r3, 7
    1562:	85 91       	lpm	r24, Z+
    1564:	37 fe       	sbrs	r3, 7
    1566:	81 91       	ld	r24, Z+
    1568:	5f 01       	movw	r10, r30
    156a:	b6 01       	movw	r22, r12
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    1572:	21 10       	cpse	r2, r1
    1574:	2a 94       	dec	r2
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	82 1a       	sub	r8, r18
    157a:	91 08       	sbc	r9, r1
    157c:	81 14       	cp	r8, r1
    157e:	91 04       	cpc	r9, r1
    1580:	71 f7       	brne	.-36     	; 0x155e <vfprintf+0x1a4>
    1582:	e8 c0       	rjmp	.+464    	; 0x1754 <vfprintf+0x39a>
    1584:	84 36       	cpi	r24, 0x64	; 100
    1586:	11 f0       	breq	.+4      	; 0x158c <vfprintf+0x1d2>
    1588:	89 36       	cpi	r24, 0x69	; 105
    158a:	41 f5       	brne	.+80     	; 0x15dc <vfprintf+0x222>
    158c:	f8 01       	movw	r30, r16
    158e:	37 fe       	sbrs	r3, 7
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <vfprintf+0x1e6>
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	0c 5f       	subi	r16, 0xFC	; 252
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x1f6>
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	07 2e       	mov	r0, r23
    15a6:	00 0c       	add	r0, r0
    15a8:	88 0b       	sbc	r24, r24
    15aa:	99 0b       	sbc	r25, r25
    15ac:	0e 5f       	subi	r16, 0xFE	; 254
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	f3 2d       	mov	r31, r3
    15b2:	ff 76       	andi	r31, 0x6F	; 111
    15b4:	3f 2e       	mov	r3, r31
    15b6:	97 ff       	sbrs	r25, 7
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <vfprintf+0x212>
    15ba:	90 95       	com	r25
    15bc:	80 95       	com	r24
    15be:	70 95       	com	r23
    15c0:	61 95       	neg	r22
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	8f 4f       	sbci	r24, 0xFF	; 255
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	f0 68       	ori	r31, 0x80	; 128
    15ca:	3f 2e       	mov	r3, r31
    15cc:	2a e0       	ldi	r18, 0x0A	; 10
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	a3 01       	movw	r20, r6
    15d2:	0e 94 10 0c 	call	0x1820	; 0x1820 <__ultoa_invert>
    15d6:	88 2e       	mov	r8, r24
    15d8:	86 18       	sub	r8, r6
    15da:	45 c0       	rjmp	.+138    	; 0x1666 <vfprintf+0x2ac>
    15dc:	85 37       	cpi	r24, 0x75	; 117
    15de:	31 f4       	brne	.+12     	; 0x15ec <vfprintf+0x232>
    15e0:	23 2d       	mov	r18, r3
    15e2:	2f 7e       	andi	r18, 0xEF	; 239
    15e4:	b2 2e       	mov	r11, r18
    15e6:	2a e0       	ldi	r18, 0x0A	; 10
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	25 c0       	rjmp	.+74     	; 0x1636 <vfprintf+0x27c>
    15ec:	93 2d       	mov	r25, r3
    15ee:	99 7f       	andi	r25, 0xF9	; 249
    15f0:	b9 2e       	mov	r11, r25
    15f2:	8f 36       	cpi	r24, 0x6F	; 111
    15f4:	c1 f0       	breq	.+48     	; 0x1626 <vfprintf+0x26c>
    15f6:	18 f4       	brcc	.+6      	; 0x15fe <vfprintf+0x244>
    15f8:	88 35       	cpi	r24, 0x58	; 88
    15fa:	79 f0       	breq	.+30     	; 0x161a <vfprintf+0x260>
    15fc:	b5 c0       	rjmp	.+362    	; 0x1768 <vfprintf+0x3ae>
    15fe:	80 37       	cpi	r24, 0x70	; 112
    1600:	19 f0       	breq	.+6      	; 0x1608 <vfprintf+0x24e>
    1602:	88 37       	cpi	r24, 0x78	; 120
    1604:	21 f0       	breq	.+8      	; 0x160e <vfprintf+0x254>
    1606:	b0 c0       	rjmp	.+352    	; 0x1768 <vfprintf+0x3ae>
    1608:	e9 2f       	mov	r30, r25
    160a:	e0 61       	ori	r30, 0x10	; 16
    160c:	be 2e       	mov	r11, r30
    160e:	b4 fe       	sbrs	r11, 4
    1610:	0d c0       	rjmp	.+26     	; 0x162c <vfprintf+0x272>
    1612:	fb 2d       	mov	r31, r11
    1614:	f4 60       	ori	r31, 0x04	; 4
    1616:	bf 2e       	mov	r11, r31
    1618:	09 c0       	rjmp	.+18     	; 0x162c <vfprintf+0x272>
    161a:	34 fe       	sbrs	r3, 4
    161c:	0a c0       	rjmp	.+20     	; 0x1632 <vfprintf+0x278>
    161e:	29 2f       	mov	r18, r25
    1620:	26 60       	ori	r18, 0x06	; 6
    1622:	b2 2e       	mov	r11, r18
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0x278>
    1626:	28 e0       	ldi	r18, 0x08	; 8
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <vfprintf+0x27c>
    162c:	20 e1       	ldi	r18, 0x10	; 16
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <vfprintf+0x27c>
    1632:	20 e1       	ldi	r18, 0x10	; 16
    1634:	32 e0       	ldi	r19, 0x02	; 2
    1636:	f8 01       	movw	r30, r16
    1638:	b7 fe       	sbrs	r11, 7
    163a:	07 c0       	rjmp	.+14     	; 0x164a <vfprintf+0x290>
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	0c 5f       	subi	r16, 0xFC	; 252
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <vfprintf+0x29c>
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 5f       	subi	r16, 0xFE	; 254
    1654:	1f 4f       	sbci	r17, 0xFF	; 255
    1656:	a3 01       	movw	r20, r6
    1658:	0e 94 10 0c 	call	0x1820	; 0x1820 <__ultoa_invert>
    165c:	88 2e       	mov	r8, r24
    165e:	86 18       	sub	r8, r6
    1660:	fb 2d       	mov	r31, r11
    1662:	ff 77       	andi	r31, 0x7F	; 127
    1664:	3f 2e       	mov	r3, r31
    1666:	36 fe       	sbrs	r3, 6
    1668:	0d c0       	rjmp	.+26     	; 0x1684 <vfprintf+0x2ca>
    166a:	23 2d       	mov	r18, r3
    166c:	2e 7f       	andi	r18, 0xFE	; 254
    166e:	a2 2e       	mov	r10, r18
    1670:	89 14       	cp	r8, r9
    1672:	58 f4       	brcc	.+22     	; 0x168a <vfprintf+0x2d0>
    1674:	34 fe       	sbrs	r3, 4
    1676:	0b c0       	rjmp	.+22     	; 0x168e <vfprintf+0x2d4>
    1678:	32 fc       	sbrc	r3, 2
    167a:	09 c0       	rjmp	.+18     	; 0x168e <vfprintf+0x2d4>
    167c:	83 2d       	mov	r24, r3
    167e:	8e 7e       	andi	r24, 0xEE	; 238
    1680:	a8 2e       	mov	r10, r24
    1682:	05 c0       	rjmp	.+10     	; 0x168e <vfprintf+0x2d4>
    1684:	b8 2c       	mov	r11, r8
    1686:	a3 2c       	mov	r10, r3
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <vfprintf+0x2d6>
    168a:	b8 2c       	mov	r11, r8
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <vfprintf+0x2d6>
    168e:	b9 2c       	mov	r11, r9
    1690:	a4 fe       	sbrs	r10, 4
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <vfprintf+0x2f8>
    1694:	fe 01       	movw	r30, r28
    1696:	e8 0d       	add	r30, r8
    1698:	f1 1d       	adc	r31, r1
    169a:	80 81       	ld	r24, Z
    169c:	80 33       	cpi	r24, 0x30	; 48
    169e:	21 f4       	brne	.+8      	; 0x16a8 <vfprintf+0x2ee>
    16a0:	9a 2d       	mov	r25, r10
    16a2:	99 7e       	andi	r25, 0xE9	; 233
    16a4:	a9 2e       	mov	r10, r25
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <vfprintf+0x300>
    16a8:	a2 fe       	sbrs	r10, 2
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0x2fe>
    16ac:	b3 94       	inc	r11
    16ae:	b3 94       	inc	r11
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <vfprintf+0x300>
    16b2:	8a 2d       	mov	r24, r10
    16b4:	86 78       	andi	r24, 0x86	; 134
    16b6:	09 f0       	breq	.+2      	; 0x16ba <vfprintf+0x300>
    16b8:	b3 94       	inc	r11
    16ba:	a3 fc       	sbrc	r10, 3
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <vfprintf+0x326>
    16be:	a0 fe       	sbrs	r10, 0
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0x314>
    16c2:	b2 14       	cp	r11, r2
    16c4:	88 f4       	brcc	.+34     	; 0x16e8 <vfprintf+0x32e>
    16c6:	28 0c       	add	r2, r8
    16c8:	92 2c       	mov	r9, r2
    16ca:	9b 18       	sub	r9, r11
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <vfprintf+0x330>
    16ce:	b2 14       	cp	r11, r2
    16d0:	60 f4       	brcc	.+24     	; 0x16ea <vfprintf+0x330>
    16d2:	b6 01       	movw	r22, r12
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    16dc:	b3 94       	inc	r11
    16de:	f7 cf       	rjmp	.-18     	; 0x16ce <vfprintf+0x314>
    16e0:	b2 14       	cp	r11, r2
    16e2:	18 f4       	brcc	.+6      	; 0x16ea <vfprintf+0x330>
    16e4:	2b 18       	sub	r2, r11
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0x332>
    16e8:	98 2c       	mov	r9, r8
    16ea:	21 2c       	mov	r2, r1
    16ec:	a4 fe       	sbrs	r10, 4
    16ee:	10 c0       	rjmp	.+32     	; 0x1710 <vfprintf+0x356>
    16f0:	b6 01       	movw	r22, r12
    16f2:	80 e3       	ldi	r24, 0x30	; 48
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    16fa:	a2 fe       	sbrs	r10, 2
    16fc:	17 c0       	rjmp	.+46     	; 0x172c <vfprintf+0x372>
    16fe:	a1 fc       	sbrc	r10, 1
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x34e>
    1702:	88 e7       	ldi	r24, 0x78	; 120
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x352>
    1708:	88 e5       	ldi	r24, 0x58	; 88
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	b6 01       	movw	r22, r12
    170e:	0c c0       	rjmp	.+24     	; 0x1728 <vfprintf+0x36e>
    1710:	8a 2d       	mov	r24, r10
    1712:	86 78       	andi	r24, 0x86	; 134
    1714:	59 f0       	breq	.+22     	; 0x172c <vfprintf+0x372>
    1716:	a1 fe       	sbrs	r10, 1
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x364>
    171a:	8b e2       	ldi	r24, 0x2B	; 43
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <vfprintf+0x366>
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	a7 fc       	sbrc	r10, 7
    1722:	8d e2       	ldi	r24, 0x2D	; 45
    1724:	b6 01       	movw	r22, r12
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    172c:	89 14       	cp	r8, r9
    172e:	38 f4       	brcc	.+14     	; 0x173e <vfprintf+0x384>
    1730:	b6 01       	movw	r22, r12
    1732:	80 e3       	ldi	r24, 0x30	; 48
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    173a:	9a 94       	dec	r9
    173c:	f7 cf       	rjmp	.-18     	; 0x172c <vfprintf+0x372>
    173e:	8a 94       	dec	r8
    1740:	f3 01       	movw	r30, r6
    1742:	e8 0d       	add	r30, r8
    1744:	f1 1d       	adc	r31, r1
    1746:	80 81       	ld	r24, Z
    1748:	b6 01       	movw	r22, r12
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    1750:	81 10       	cpse	r8, r1
    1752:	f5 cf       	rjmp	.-22     	; 0x173e <vfprintf+0x384>
    1754:	22 20       	and	r2, r2
    1756:	09 f4       	brne	.+2      	; 0x175a <vfprintf+0x3a0>
    1758:	42 ce       	rjmp	.-892    	; 0x13de <vfprintf+0x24>
    175a:	b6 01       	movw	r22, r12
    175c:	80 e2       	ldi	r24, 0x20	; 32
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <fputc>
    1764:	2a 94       	dec	r2
    1766:	f6 cf       	rjmp	.-20     	; 0x1754 <vfprintf+0x39a>
    1768:	f6 01       	movw	r30, r12
    176a:	86 81       	ldd	r24, Z+6	; 0x06
    176c:	97 81       	ldd	r25, Z+7	; 0x07
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x3ba>
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	2b 96       	adiw	r28, 0x0b	; 11
    1776:	e2 e1       	ldi	r30, 0x12	; 18
    1778:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__epilogue_restores__>

0000177c <strnlen_P>:
    177c:	fc 01       	movw	r30, r24
    177e:	05 90       	lpm	r0, Z+
    1780:	61 50       	subi	r22, 0x01	; 1
    1782:	70 40       	sbci	r23, 0x00	; 0
    1784:	01 10       	cpse	r0, r1
    1786:	d8 f7       	brcc	.-10     	; 0x177e <strnlen_P+0x2>
    1788:	80 95       	com	r24
    178a:	90 95       	com	r25
    178c:	8e 0f       	add	r24, r30
    178e:	9f 1f       	adc	r25, r31
    1790:	08 95       	ret

00001792 <strnlen>:
    1792:	fc 01       	movw	r30, r24
    1794:	61 50       	subi	r22, 0x01	; 1
    1796:	70 40       	sbci	r23, 0x00	; 0
    1798:	01 90       	ld	r0, Z+
    179a:	01 10       	cpse	r0, r1
    179c:	d8 f7       	brcc	.-10     	; 0x1794 <strnlen+0x2>
    179e:	80 95       	com	r24
    17a0:	90 95       	com	r25
    17a2:	8e 0f       	add	r24, r30
    17a4:	9f 1f       	adc	r25, r31
    17a6:	08 95       	ret

000017a8 <fputc>:
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	fb 01       	movw	r30, r22
    17b2:	23 81       	ldd	r18, Z+3	; 0x03
    17b4:	21 fd       	sbrc	r18, 1
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <fputc+0x16>
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	9f ef       	ldi	r25, 0xFF	; 255
    17bc:	2c c0       	rjmp	.+88     	; 0x1816 <fputc+0x6e>
    17be:	22 ff       	sbrs	r18, 2
    17c0:	16 c0       	rjmp	.+44     	; 0x17ee <fputc+0x46>
    17c2:	46 81       	ldd	r20, Z+6	; 0x06
    17c4:	57 81       	ldd	r21, Z+7	; 0x07
    17c6:	24 81       	ldd	r18, Z+4	; 0x04
    17c8:	35 81       	ldd	r19, Z+5	; 0x05
    17ca:	42 17       	cp	r20, r18
    17cc:	53 07       	cpc	r21, r19
    17ce:	44 f4       	brge	.+16     	; 0x17e0 <fputc+0x38>
    17d0:	a0 81       	ld	r26, Z
    17d2:	b1 81       	ldd	r27, Z+1	; 0x01
    17d4:	9d 01       	movw	r18, r26
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	31 83       	std	Z+1, r19	; 0x01
    17dc:	20 83       	st	Z, r18
    17de:	8c 93       	st	X, r24
    17e0:	26 81       	ldd	r18, Z+6	; 0x06
    17e2:	37 81       	ldd	r19, Z+7	; 0x07
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	37 83       	std	Z+7, r19	; 0x07
    17ea:	26 83       	std	Z+6, r18	; 0x06
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <fputc+0x6e>
    17ee:	8b 01       	movw	r16, r22
    17f0:	ec 01       	movw	r28, r24
    17f2:	fb 01       	movw	r30, r22
    17f4:	00 84       	ldd	r0, Z+8	; 0x08
    17f6:	f1 85       	ldd	r31, Z+9	; 0x09
    17f8:	e0 2d       	mov	r30, r0
    17fa:	09 95       	icall
    17fc:	89 2b       	or	r24, r25
    17fe:	e1 f6       	brne	.-72     	; 0x17b8 <fputc+0x10>
    1800:	d8 01       	movw	r26, r16
    1802:	16 96       	adiw	r26, 0x06	; 6
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	17 97       	sbiw	r26, 0x07	; 7
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	17 96       	adiw	r26, 0x07	; 7
    180e:	9c 93       	st	X, r25
    1810:	8e 93       	st	-X, r24
    1812:	16 97       	sbiw	r26, 0x06	; 6
    1814:	ce 01       	movw	r24, r28
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <__ultoa_invert>:
    1820:	fa 01       	movw	r30, r20
    1822:	aa 27       	eor	r26, r26
    1824:	28 30       	cpi	r18, 0x08	; 8
    1826:	51 f1       	breq	.+84     	; 0x187c <__ultoa_invert+0x5c>
    1828:	20 31       	cpi	r18, 0x10	; 16
    182a:	81 f1       	breq	.+96     	; 0x188c <__ultoa_invert+0x6c>
    182c:	e8 94       	clt
    182e:	6f 93       	push	r22
    1830:	6e 7f       	andi	r22, 0xFE	; 254
    1832:	6e 5f       	subi	r22, 0xFE	; 254
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	8f 4f       	sbci	r24, 0xFF	; 255
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	af 4f       	sbci	r26, 0xFF	; 255
    183c:	b1 e0       	ldi	r27, 0x01	; 1
    183e:	3e d0       	rcall	.+124    	; 0x18bc <__ultoa_invert+0x9c>
    1840:	b4 e0       	ldi	r27, 0x04	; 4
    1842:	3c d0       	rcall	.+120    	; 0x18bc <__ultoa_invert+0x9c>
    1844:	67 0f       	add	r22, r23
    1846:	78 1f       	adc	r23, r24
    1848:	89 1f       	adc	r24, r25
    184a:	9a 1f       	adc	r25, r26
    184c:	a1 1d       	adc	r26, r1
    184e:	68 0f       	add	r22, r24
    1850:	79 1f       	adc	r23, r25
    1852:	8a 1f       	adc	r24, r26
    1854:	91 1d       	adc	r25, r1
    1856:	a1 1d       	adc	r26, r1
    1858:	6a 0f       	add	r22, r26
    185a:	71 1d       	adc	r23, r1
    185c:	81 1d       	adc	r24, r1
    185e:	91 1d       	adc	r25, r1
    1860:	a1 1d       	adc	r26, r1
    1862:	20 d0       	rcall	.+64     	; 0x18a4 <__ultoa_invert+0x84>
    1864:	09 f4       	brne	.+2      	; 0x1868 <__ultoa_invert+0x48>
    1866:	68 94       	set
    1868:	3f 91       	pop	r19
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	26 9f       	mul	r18, r22
    186e:	11 24       	eor	r1, r1
    1870:	30 19       	sub	r19, r0
    1872:	30 5d       	subi	r19, 0xD0	; 208
    1874:	31 93       	st	Z+, r19
    1876:	de f6       	brtc	.-74     	; 0x182e <__ultoa_invert+0xe>
    1878:	cf 01       	movw	r24, r30
    187a:	08 95       	ret
    187c:	46 2f       	mov	r20, r22
    187e:	47 70       	andi	r20, 0x07	; 7
    1880:	40 5d       	subi	r20, 0xD0	; 208
    1882:	41 93       	st	Z+, r20
    1884:	b3 e0       	ldi	r27, 0x03	; 3
    1886:	0f d0       	rcall	.+30     	; 0x18a6 <__ultoa_invert+0x86>
    1888:	c9 f7       	brne	.-14     	; 0x187c <__ultoa_invert+0x5c>
    188a:	f6 cf       	rjmp	.-20     	; 0x1878 <__ultoa_invert+0x58>
    188c:	46 2f       	mov	r20, r22
    188e:	4f 70       	andi	r20, 0x0F	; 15
    1890:	40 5d       	subi	r20, 0xD0	; 208
    1892:	4a 33       	cpi	r20, 0x3A	; 58
    1894:	18 f0       	brcs	.+6      	; 0x189c <__ultoa_invert+0x7c>
    1896:	49 5d       	subi	r20, 0xD9	; 217
    1898:	31 fd       	sbrc	r19, 1
    189a:	40 52       	subi	r20, 0x20	; 32
    189c:	41 93       	st	Z+, r20
    189e:	02 d0       	rcall	.+4      	; 0x18a4 <__ultoa_invert+0x84>
    18a0:	a9 f7       	brne	.-22     	; 0x188c <__ultoa_invert+0x6c>
    18a2:	ea cf       	rjmp	.-44     	; 0x1878 <__ultoa_invert+0x58>
    18a4:	b4 e0       	ldi	r27, 0x04	; 4
    18a6:	a6 95       	lsr	r26
    18a8:	97 95       	ror	r25
    18aa:	87 95       	ror	r24
    18ac:	77 95       	ror	r23
    18ae:	67 95       	ror	r22
    18b0:	ba 95       	dec	r27
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <__ultoa_invert+0x86>
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	61 05       	cpc	r22, r1
    18b8:	71 05       	cpc	r23, r1
    18ba:	08 95       	ret
    18bc:	9b 01       	movw	r18, r22
    18be:	ac 01       	movw	r20, r24
    18c0:	0a 2e       	mov	r0, r26
    18c2:	06 94       	lsr	r0
    18c4:	57 95       	ror	r21
    18c6:	47 95       	ror	r20
    18c8:	37 95       	ror	r19
    18ca:	27 95       	ror	r18
    18cc:	ba 95       	dec	r27
    18ce:	c9 f7       	brne	.-14     	; 0x18c2 <__ultoa_invert+0xa2>
    18d0:	62 0f       	add	r22, r18
    18d2:	73 1f       	adc	r23, r19
    18d4:	84 1f       	adc	r24, r20
    18d6:	95 1f       	adc	r25, r21
    18d8:	a0 1d       	adc	r26, r0
    18da:	08 95       	ret

000018dc <eeprom_read_word>:
    18dc:	a8 e1       	ldi	r26, 0x18	; 24
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	42 e0       	ldi	r20, 0x02	; 2
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <eeprom_read_blraw>

000018e8 <eeprom_write_word>:
    18e8:	0e 94 89 0c 	call	0x1912	; 0x1912 <eeprom_write_byte>
    18ec:	27 2f       	mov	r18, r23
    18ee:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <eeprom_write_r18>

000018f2 <eeprom_read_block>:
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22

000018f6 <eeprom_read_blraw>:
    18f6:	fc 01       	movw	r30, r24
    18f8:	e1 99       	sbic	0x1c, 1	; 28
    18fa:	fe cf       	rjmp	.-4      	; 0x18f8 <eeprom_read_blraw+0x2>
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <eeprom_read_blraw+0x14>
    18fe:	ff bb       	out	0x1f, r31	; 31
    1900:	ee bb       	out	0x1e, r30	; 30
    1902:	e0 9a       	sbi	0x1c, 0	; 28
    1904:	31 96       	adiw	r30, 0x01	; 1
    1906:	0d b2       	in	r0, 0x1d	; 29
    1908:	0d 92       	st	X+, r0
    190a:	41 50       	subi	r20, 0x01	; 1
    190c:	50 40       	sbci	r21, 0x00	; 0
    190e:	b8 f7       	brcc	.-18     	; 0x18fe <eeprom_read_blraw+0x8>
    1910:	08 95       	ret

00001912 <eeprom_write_byte>:
    1912:	26 2f       	mov	r18, r22

00001914 <eeprom_write_r18>:
    1914:	e1 99       	sbic	0x1c, 1	; 28
    1916:	fe cf       	rjmp	.-4      	; 0x1914 <eeprom_write_r18>
    1918:	9f bb       	out	0x1f, r25	; 31
    191a:	8e bb       	out	0x1e, r24	; 30
    191c:	2d bb       	out	0x1d, r18	; 29
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	e2 9a       	sbi	0x1c, 2	; 28
    1924:	e1 9a       	sbi	0x1c, 1	; 28
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	08 95       	ret

0000192c <__prologue_saves__>:
    192c:	2f 92       	push	r2
    192e:	3f 92       	push	r3
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	ca 1b       	sub	r28, r26
    1956:	db 0b       	sbc	r29, r27
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	09 94       	ijmp

00001964 <__epilogue_restores__>:
    1964:	2a 88       	ldd	r2, Y+18	; 0x12
    1966:	39 88       	ldd	r3, Y+17	; 0x11
    1968:	48 88       	ldd	r4, Y+16	; 0x10
    196a:	5f 84       	ldd	r5, Y+15	; 0x0f
    196c:	6e 84       	ldd	r6, Y+14	; 0x0e
    196e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1970:	8c 84       	ldd	r8, Y+12	; 0x0c
    1972:	9b 84       	ldd	r9, Y+11	; 0x0b
    1974:	aa 84       	ldd	r10, Y+10	; 0x0a
    1976:	b9 84       	ldd	r11, Y+9	; 0x09
    1978:	c8 84       	ldd	r12, Y+8	; 0x08
    197a:	df 80       	ldd	r13, Y+7	; 0x07
    197c:	ee 80       	ldd	r14, Y+6	; 0x06
    197e:	fd 80       	ldd	r15, Y+5	; 0x05
    1980:	0c 81       	ldd	r16, Y+4	; 0x04
    1982:	1b 81       	ldd	r17, Y+3	; 0x03
    1984:	aa 81       	ldd	r26, Y+2	; 0x02
    1986:	b9 81       	ldd	r27, Y+1	; 0x01
    1988:	ce 0f       	add	r28, r30
    198a:	d1 1d       	adc	r29, r1
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	ed 01       	movw	r28, r26
    1998:	08 95       	ret

0000199a <_exit>:
    199a:	f8 94       	cli

0000199c <__stop_program>:
    199c:	ff cf       	rjmp	.-2      	; 0x199c <__stop_program>
